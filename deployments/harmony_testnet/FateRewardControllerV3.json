{
  "address": "0xc77b5174182dd798f705316541e637677f34f5d5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_fate",
          "type": "address"
        },
        {
          "internalType": "contract IRewardScheduleV3",
          "name": "_emissionSchedule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IFateRewardController[]",
          "name": "_oldControllers",
          "type": "address[]"
        },
        {
          "internalType": "contract IMockLpTokenFactory",
          "name": "_mockLpTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fateFeeTo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "emissionSchedule",
          "type": "address"
        }
      ],
      "name": "EmissionScheduleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "ExcludedAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_fateFeeTo",
          "type": "address"
        }
      ],
      "name": "FateFeeToSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_lpWithdrawPeriodBlocks",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_lpWithdrawFeePercent",
          "type": "uint256[]"
        }
      ],
      "name": "LPWithdrawDataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_lockedRewardsPeriodBlocks",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_lockedRewardsFeePercents",
          "type": "uint256[]"
        }
      ],
      "name": "LockedRewardsDataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "MigratorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "name": "PoolAllocPointSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "emissionSchedule",
          "type": "address"
        }
      ],
      "name": "VaultSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POINTS_PER_BLOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_lpTokens",
          "type": "address[]"
        }
      ],
      "name": "addMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "allLockedFate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "allPendingLockedFate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "allPendingUnlockedFate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pids",
          "type": "uint256[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionSchedule",
      "outputs": [
        {
          "internalType": "contract IRewardScheduleV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fate",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fateFeeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "name": "getLPWithdrawFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "name": "getLockedRewardsFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid1",
          "type": "uint256"
        }
      ],
      "name": "getNewRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isExcludedAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedRewardsFeePercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedRewardsPeriodBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpWithdrawFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpWithdrawPeriodBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockLpTokenFactory",
      "outputs": [
        {
          "internalType": "contract IMockLpTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oldControllers",
      "outputs": [
        {
          "internalType": "contract IFateRewardController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingLockedFate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingUnlockedFate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedFatePerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedLockedFatePerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardScheduleV3",
          "name": "_emissionSchedule",
          "type": "address"
        }
      ],
      "name": "setEmissionSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "status",
          "type": "bool[]"
        }
      ],
      "name": "setExcludedAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fateFeeTo",
          "type": "address"
        }
      ],
      "name": "setFateFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_lpWithdrawPeriodBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lpWithdrawFeePercent",
          "type": "uint256[]"
        }
      ],
      "name": "setLPWithdrawData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_lockedRewardsPeriodBlocks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lockedRewardsFeePercents",
          "type": "uint256[]"
        }
      ],
      "name": "setLockedRewardsData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trackedPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLockedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userMembershipInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "firstDepositBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xada2af74b4b2ce4085233d2edb343da684cfdcaaeafc1a00771ad22ff9832a55",
  "receipt": {
    "to": null,
    "from": "0xabb6d4a1015e291b1bc71e7e56ff2c9204665b07",
    "contractAddress": "0xc77b5174182dd798f705316541e637677f34f5d5",
    "transactionIndex": "0x1",
    "gasUsed": "0x4f50b0",
    "logsBloom": "0x
    "blockHash": "0xe4e4b3ec4d67ad30842514e406ba0cd4e67073172ea6f3451db648579551a5c9",
    "transactionHash": "0xada2af74b4b2ce4085233d2edb343da684cfdcaaeafc1a00771ad22ff9832a55",
    "logs": [],
    "blockNumber": "0x11b7815",
    "cumulativeGasUsed": "0x4ffd59",
    "status": "0x0"
  },
  "args": [
    "0x7C04F4cdCf87b2b85DA4bB4E79885D2b8D5C1f12",
    "0xfDdE60866508263e30C769e8592BB0f8C3274ba7",
    "0x13c99770694f07279607a6274f28a28c33086424",
    [
      "0xef1a47106b5B1eb839a2995fb29Fa5a7Ff37Be27"
    ],
    "0xB7734155287182814ac4263014807D2505C63A74",
    "0xabB6D4a1015e291b1bc71e7e56ff2c9204665b07"
  ],
  "solcInputHash": "0ece8126b14982d6d8d775ea1585ad62",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_fate\",\"type\":\"address\"},{\"internalType\":\"contract IRewardScheduleV3\",\"name\":\"_emissionSchedule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IFateRewardController[]\",\"name\":\"_oldControllers\",\"type\":\"address[]\"},{\"internalType\":\"contract IMockLpTokenFactory\",\"name\":\"_mockLpTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fateFeeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emissionSchedule\",\"type\":\"address\"}],\"name\":\"EmissionScheduleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludedAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fateFeeTo\",\"type\":\"address\"}],\"name\":\"FateFeeToSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_lpWithdrawPeriodBlocks\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_lpWithdrawFeePercent\",\"type\":\"uint256[]\"}],\"name\":\"LPWithdrawDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_lockedRewardsPeriodBlocks\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_lockedRewardsFeePercents\",\"type\":\"uint256[]\"}],\"name\":\"LockedRewardsDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"PoolAllocPointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emissionSchedule\",\"type\":\"address\"}],\"name\":\"VaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POINTS_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"addMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allLockedFate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPendingLockedFate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPendingUnlockedFate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionSchedule\",\"outputs\":[{\"internalType\":\"contract IRewardScheduleV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fate\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fateFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"getLPWithdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"getLockedRewardsFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid1\",\"type\":\"uint256\"}],\"name\":\"getNewRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedRewardsFeePercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedRewardsPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpWithdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpWithdrawPeriodBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mockLpTokenFactory\",\"outputs\":[{\"internalType\":\"contract IMockLpTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oldControllers\",\"outputs\":[{\"internalType\":\"contract IFateRewardController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingLockedFate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingUnlockedFate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedFatePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedLockedFatePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardScheduleV3\",\"name\":\"_emissionSchedule\",\"type\":\"address\"}],\"name\":\"setEmissionSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"status\",\"type\":\"bool[]\"}],\"name\":\"setExcludedAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fateFeeTo\",\"type\":\"address\"}],\"name\":\"setFateFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_lpWithdrawPeriodBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lpWithdrawFeePercent\",\"type\":\"uint256[]\"}],\"name\":\"setLPWithdrawData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_lockedRewardsPeriodBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockedRewardsFeePercents\",\"type\":\"uint256[]\"}],\"name\":\"setLockedRewardsData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trackedPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMembershipInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstDepositBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLPWithdrawFeePercent(uint256,address)\":{\"details\":\"calculate percent of lpWithdrawFee based on their deposit period when users withdaw during epoch, this fee will be reduced from their withdrawAmount this fee will be still stored on FateRewardControllerV3 contract this fee does not work for excluded address and after epoch is ended\"},\"getLockedRewardsFeePercent(uint256,address)\":{\"details\":\"calculate percent of lockedRewardFee based on their deposit period when withdraw during epoch, this fee will be reduced from member's lockedRewards this fee does not work for excluded address and after epoch is ended\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setExcludedAddresses(address[],bool[])\":{\"details\":\"set excluded addresses\"},\"setLPWithdrawData(uint256[],uint256[])\":{\"details\":\"set lpWithdrawPeriodBlocks & lpWithdrawFeePercent\"},\"setLockedRewardsData(uint256[],uint256[])\":{\"details\":\"set lockedRewardsPeriodBlocks & lockedRewardsFeePercents\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userPoints(uint256,address)\":{\"details\":\"calculate Points earned by this user\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fatex/v3/FateRewardControllerV3.sol\":\"FateRewardControllerV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/fatex/IFateRewardController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IMigratorChef.sol\\\";\\nimport \\\"./IRewardSchedule.sol\\\";\\n\\nabstract contract IFateRewardController is Ownable, IMigratorChef {\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of FATEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accumulatedFatePerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accumulatedFatePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. FATEs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that FATEs distribution occurs.\\n        uint256 accumulatedFatePerShare; // Accumulated FATEs per share, times 1e12. See below.\\n    }\\n\\n    function fate() external virtual view returns (IERC20);\\n    function vault() external virtual view returns (address);\\n    function migrator() external virtual view returns (IMigratorChef);\\n    function poolInfo(uint _pid) external virtual view returns (IERC20 lpToken, uint256 allocPoint, uint256 lastRewardBlock, uint256 accumulatedFatePerShare);\\n    function userInfo(uint _pid, address _user) external virtual view returns (uint256 amount, uint256 rewardDebt);\\n    function poolLength() external virtual view returns (uint);\\n    function startBlock() external virtual view returns (uint);\\n    function totalAllocPoint() external virtual view returns (uint);\\n    function pendingFate(uint256 _pid, address _user) external virtual view returns (uint256);\\n\\n    function setMigrator(IMigratorChef _migrator) external virtual;\\n    function setVault(address _vault) external virtual;\\n    function migrate(uint256 _pid) external virtual;\\n\\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external virtual;\\n\\n}\\n\",\"keccak256\":\"0xf59283dbe2e67737607bac4d2db244cd738b782f6c61169c5458a2e5d28b79b7\",\"license\":\"MIT\"},\"contracts/fatex/IMigratorChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMigratorChef {\\n    // Perform LP token migration from legacy UniswapV2 to FATEx DEX.\\n    // Take the current LP token address and return the new LP token address.\\n    // Migrator should have full access to the caller's LP token.\\n    // Return the new LP token address.\\n    //\\n    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\\n    // FATEx DEX must mint EXACTLY the same amount of FATEx DEX LP tokens or\\n    // else something bad will happen. Traditional UniswapV2 does not\\n    // do that so be careful!\\n    function migrate(IERC20 token) external returns (IERC20);\\n}\\n\",\"keccak256\":\"0xea6ffb28383a4691e7d61cbb83c9868dfa3e37a8723197848d8a33c86f725196\",\"license\":\"MIT\"},\"contracts/fatex/IMockLpTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMockLpTokenFactory {\\n\\n    function create(\\n        address _lpToken,\\n        address _rewardController\\n    ) external returns (address);\\n\\n}\\n\",\"keccak256\":\"0xabb2a643dfacb042f2576058dd7e06d8fcc6aad51883637525b7921c8eb19c69\",\"license\":\"MIT\"},\"contracts/fatex/IRewardSchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardSchedule {\\n\\n    function getFatePerBlock(\\n        uint _startBlock,\\n        uint _fromBlock,\\n        uint _toBlock\\n    )\\n    external\\n    view\\n    returns (uint);\\n\\n\\n    function calculateCurrentIndex(\\n        uint _startBlock\\n    )\\n    external\\n    view\\n    returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x251c2d21da526da5717a2d10ce3f2b193270705db5a31e5be97dbd3bce59621e\",\"license\":\"MIT\"},\"contracts/fatex/MockLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MockLpToken {\\n\\n    address internal rewardController;\\n    address internal lpToken;\\n\\n    event MockLpTokenCreated(address indexed lpToken);\\n\\n    constructor(\\n        address _lpToken,\\n        address _rewardController\\n    ) public {\\n        lpToken = _lpToken;\\n        rewardController = _rewardController;\\n        emit MockLpTokenCreated(_lpToken);\\n    }\\n\\n    function balanceOf(address) external view returns (uint) {\\n        return IERC20(lpToken).balanceOf(rewardController);\\n    }\\n\\n}\",\"keccak256\":\"0x2fad3394e9b8060a88c2b3939e8d8a4fb666ceb421e3a40733d7c8991d46d24f\",\"license\":\"MIT\"},\"contracts/fatex/v3/FateRewardControllerV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../MockLpToken.sol\\\";\\nimport \\\"../IMockLpTokenFactory.sol\\\";\\nimport \\\"../IFateRewardController.sol\\\";\\n\\nimport \\\"./MembershipWithReward.sol\\\";\\nimport \\\"./IFateRewardControllerV3.sol\\\";\\n\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once FATE is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract FateRewardControllerV3 is IFateRewardControllerV3, MembershipWithReward {\\n    using SafeERC20 for IERC20;\\n\\n    address public fateFeeTo;\\n\\n    // Info of each user.\\n    struct UserInfoV3 {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 lockedRewardDebt; // Reward debt. See explanation below.\\n        bool isUpdated; // true if the user has been migrated from the v1 controller to v2\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of FATEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accumulatedFatePerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accumulatedFatePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    IERC20 public override fate;\\n\\n    address public override vault;\\n\\n    IFateRewardController[] public oldControllers;\\n\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorChef public override migrator;\\n\\n    // Info of each pool.\\n    PoolInfoV3[] public override poolInfo;\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfoV3)) internal _userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public override totalAllocPoint = 0;\\n\\n    // The block number when FATE mining starts.\\n    uint256 public override startBlock;\\n\\n    IMockLpTokenFactory public mockLpTokenFactory;\\n\\n    // address of FeeTokenConverterToFate contract\\n    event FateFeeToSet(address _fateFeeTo);\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event ClaimRewards(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event EmissionScheduleSet(address indexed emissionSchedule);\\n\\n    event MigratorSet(address indexed migrator);\\n\\n    event VaultSet(address indexed emissionSchedule);\\n\\n    event PoolAdded(uint indexed pid, address indexed lpToken, uint allocPoint);\\n\\n    event PoolAllocPointSet(uint indexed pid, uint allocPoint);\\n\\n    constructor(\\n        IERC20 _fate,\\n        IRewardScheduleV3 _emissionSchedule,\\n        address _vault,\\n        IFateRewardController[] memory _oldControllers,\\n        IMockLpTokenFactory _mockLpTokenFactory,\\n        address _fateFeeTo\\n    ) public {\\n        fate = _fate;\\n        emissionSchedule = _emissionSchedule;\\n        vault = _vault;\\n        oldControllers = _oldControllers;\\n        mockLpTokenFactory = _mockLpTokenFactory;\\n        startBlock = _oldControllers[0].startBlock();\\n        fateFeeTo = _fateFeeTo;\\n\\n        // inset old controller's pooInfo\\n        for (uint i = 0; i < _oldControllers[0].poolLength(); i++) {\\n            (IERC20 lpToken, uint256 allocPoint, ,) = _oldControllers[0].poolInfo(i);\\n            poolInfo[i] = PoolInfoV3({\\n              lpToken: lpToken,\\n              allocPoint: allocPoint,\\n              lastRewardBlock: startBlock,\\n              accumulatedFatePerShare: 0,\\n              accumulatedLockedFatePerShare: 0\\n            });\\n        }\\n    }\\n\\n    function setFateFeeTo(address _fateFeeTo) external onlyOwner {\\n        require(_fateFeeTo != address(0), 'setFateFeeTo: invalid feeTo');\\n        fateFeeTo = _fateFeeTo;\\n        emit FateFeeToSet(fateFeeTo);\\n    }\\n\\n    function poolLength() external override view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function addMany(\\n        IERC20[] calldata _lpTokens\\n    ) external onlyOwner {\\n        uint allocPoint = 0;\\n        for (uint i = 0; i < _lpTokens.length; i++) {\\n            bool shouldUpdate = i == _lpTokens.length - 1;\\n            _add(allocPoint, _lpTokens[i], shouldUpdate);\\n        }\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        _add(_allocPoint, _lpToken, _withUpdate);\\n    }\\n\\n    function _add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) internal {\\n        for (uint i = 0; i < poolInfo.length; i++) {\\n            require(\\n                poolInfo[i].lpToken != _lpToken,\\n                \\\"add: LP token already added\\\"\\n            );\\n        }\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        require(\\n            _lpToken.balanceOf(address(this)) >= 0,\\n            \\\"add: invalid LP token\\\"\\n        );\\n\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfoV3({\\n                lpToken : _lpToken,\\n                allocPoint : _allocPoint,\\n                lastRewardBlock : lastRewardBlock,\\n                accumulatedFatePerShare : 0,\\n                accumulatedLockedFatePerShare : 0\\n            })\\n        );\\n        emit PoolAdded(poolInfo.length - 1, address(_lpToken), _allocPoint);\\n    }\\n\\n    // Update the given pool's FATE allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit PoolAllocPointSet(_pid, _allocPoint);\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorChef _migrator) public override onlyOwner {\\n        migrator = _migrator;\\n        emit MigratorSet(address(_migrator));\\n    }\\n\\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\n    function migrate(uint256 _pid) public override {\\n        require(address(migrator) != address(0), \\\"migrate: no migrator\\\");\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        IERC20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IERC20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    function migrate(\\n        IERC20 token\\n    ) external override returns (IERC20) {\\n        IFateRewardController oldController = IFateRewardController(address(0));\\n        for (uint i = 0; i < oldControllers.length; i++) {\\n            if (address(oldControllers[i]) == msg.sender) {\\n                oldController = oldControllers[i];\\n            }\\n        }\\n        require(\\n            address(oldController) != address(0),\\n            \\\"migrate: invalid sender\\\"\\n        );\\n\\n        IERC20 lpToken;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accumulatedFatePerShare;\\n        uint oldPoolLength = oldController.poolLength();\\n        for (uint i = 0; i < oldPoolLength; i++) {\\n            (lpToken, allocPoint, lastRewardBlock, accumulatedFatePerShare) = oldController.poolInfo(poolInfo.length);\\n            if (address(lpToken) == address(token)) {\\n                break;\\n            }\\n        }\\n\\n        // transfer all of the tokens from the previous controller to here\\n        token.safeTransferFrom(msg.sender, address(this), token.balanceOf(msg.sender));\\n\\n        poolInfo.push(\\n            PoolInfoV3({\\n                lpToken : lpToken,\\n                allocPoint : allocPoint,\\n                lastRewardBlock : lastRewardBlock,\\n                accumulatedFatePerShare : accumulatedFatePerShare,\\n                accumulatedLockedFatePerShare : 0\\n            })\\n        );\\n        emit PoolAdded(poolInfo.length - 1, address(token), allocPoint);\\n\\n        uint _totalAllocPoint = 0;\\n        for (uint i = 0; i < poolInfo.length; i++) {\\n            _totalAllocPoint = _totalAllocPoint.add(poolInfo[i].allocPoint);\\n        }\\n        totalAllocPoint = _totalAllocPoint;\\n\\n        return IERC20(mockLpTokenFactory.create(address(lpToken), address(this)));\\n    }\\n\\n    function userInfo(\\n        uint _pid,\\n        address _user\\n    ) public override view returns (uint amount, uint rewardDebt) {\\n        UserInfoV3 memory user = _userInfo[_pid][_user];\\n        return (user.amount, user.rewardDebt);\\n    }\\n\\n    function _getUserInfo(\\n        uint _pid,\\n        address _user\\n    ) internal view returns (IFateRewardControllerV3.UserInfo memory) {\\n        UserInfoV3 memory user = _userInfo[_pid][_user];\\n        return IFateRewardControllerV3.UserInfo(user.amount, user.rewardDebt, user.lockedRewardDebt);\\n    }\\n\\n    // View function to see pending FATE tokens on frontend.\\n    function pendingUnlockedFate(\\n        uint256 _pid,\\n        address _user\\n    )\\n    public\\n    override\\n    view\\n    returns (uint256)\\n    {\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        IFateRewardControllerV3.UserInfo memory user = _getUserInfo(_pid, _user);\\n        uint256 accumulatedFatePerShare = pool.accumulatedFatePerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            (, uint256 unlockedFatePerBlock) = emissionSchedule.getFatePerBlock(\\n                startBlock,\\n                pool.lastRewardBlock,\\n                block.number\\n            ); // only unlocked Fates\\n            uint256 unlockedFateReward = unlockedFatePerBlock\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accumulatedFatePerShare = accumulatedFatePerShare\\n                .add(unlockedFateReward\\n                .mul(1e12)\\n                .div(lpSupply)\\n            );\\n        }\\n        return user.amount\\n            .mul(accumulatedFatePerShare)\\n            .div(1e12)\\n            .sub(user.rewardDebt);\\n    }\\n\\n    function pendingLockedFate(\\n        uint256 _pid,\\n        address _user\\n    )\\n    public\\n    override\\n    view\\n    returns (uint256)\\n    {\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        IFateRewardControllerV3.UserInfo memory user = _getUserInfo(_pid, _user);\\n        uint256 accumulatedFatePerShare = pool.accumulatedFatePerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            (uint256 lockedFatePerBlock,) = emissionSchedule.getFatePerBlock(\\n                startBlock,\\n                pool.lastRewardBlock,\\n                block.number\\n            ); // only locked Fates\\n            uint256 lockedFateReward = lockedFatePerBlock\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accumulatedFatePerShare = accumulatedFatePerShare\\n                .add(lockedFateReward\\n                .mul(1e12)\\n                .div(lpSupply)\\n            );\\n        }\\n        return user.amount\\n            .mul(accumulatedFatePerShare)\\n            .div(1e12)\\n            .sub(user.lockedRewardDebt);\\n    }\\n\\n    function allPendingUnlockedFate(\\n        address _user\\n    )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n    {\\n        uint _pendingFateRewards = 0;\\n        for (uint i = 0; i < poolInfo.length; i++) {\\n            _pendingFateRewards = _pendingFateRewards.add(pendingUnlockedFate(i, _user));\\n        }\\n        return _pendingFateRewards;\\n    }\\n\\n    function allPendingLockedFate(\\n        address _user\\n    )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n    {\\n        uint _pendingFateRewards = 0;\\n        for (uint i = 0; i < poolInfo.length; i++) {\\n            _pendingFateRewards = _pendingFateRewards.add(pendingLockedFate(i, _user));\\n        }\\n        return _pendingFateRewards;\\n    }\\n\\n    function allLockedFate(\\n        address _user\\n    )\\n    external\\n    override\\n    view\\n    returns (uint256)\\n    {\\n        uint _pendingFateRewards = 0;\\n        for (uint i = 0; i < poolInfo.length; i++) {\\n            _pendingFateRewards = _pendingFateRewards.add(pendingLockedFate(i, _user)).add(userLockedRewards[i][_user]);\\n        }\\n        return _pendingFateRewards;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    function getNewRewardPerBlock(uint pid1) public view returns (uint) {\\n        (, uint256 fatePerBlock) = emissionSchedule.getFatePerBlock(\\n            startBlock,\\n            block.number - 1,\\n            block.number\\n        );\\n        if (pid1 == 0) {\\n            return fatePerBlock;\\n        } else {\\n            return fatePerBlock.mul(poolInfo[pid1 - 1].allocPoint).div(totalAllocPoint);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        (uint256 lockedFatePerBlock, uint256 unlockedFatePerBlock) = emissionSchedule.getFatePerBlock(\\n            startBlock,\\n            pool.lastRewardBlock,\\n            block.number\\n        );\\n\\n        uint256 unlockedFateReward = unlockedFatePerBlock\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n        uint256 lockedFateReward = lockedFatePerBlock\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n\\n        if (unlockedFateReward > 0) {\\n            fate.transferFrom(vault, address(this), unlockedFateReward);\\n            pool.accumulatedFatePerShare = pool.accumulatedFatePerShare\\n                .add(unlockedFateReward.mul(1e12).div(lpSupply));\\n        }\\n        if (lockedFateReward > 0) {\\n            pool.accumulatedLockedFatePerShare = pool.accumulatedLockedFatePerShare\\n                .add(lockedFateReward.mul(1e12).div(lpSupply));\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for FATE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        IFateRewardControllerV3.UserInfo memory user = _getUserInfo(_pid, msg.sender);\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            _claimRewards(_pid, msg.sender, user, pool);\\n        }\\n        pool.lpToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n\\n        uint userBalance = user.amount.add(_amount);\\n        _userInfo[_pid][msg.sender] = UserInfoV3({\\n            amount : userBalance,\\n            rewardDebt : userBalance.mul(pool.accumulatedFatePerShare).div(1e12),\\n            lockedRewardDebt : userBalance.mul(pool.accumulatedLockedFatePerShare).div(1e12),\\n            isUpdated : true\\n        });\\n\\n        // record deposit block\\n        MembershipInfo memory membership = userMembershipInfo[_pid][msg.sender];\\n        if (\\n            block.number <= emissionSchedule.epochEndBlock() &&\\n            membership.firstDepositBlock == 0 // not recoreded (or deposited) yet\\n        ) {\\n            userMembershipInfo[_pid][msg.sender] = MembershipInfo({\\n                firstDepositBlock: block.number,\\n                lastWithdrawBlock:\\n                    membership.lastWithdrawBlock > 0 ? membership.lastWithdrawBlock : block.number\\n            });\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        IFateRewardControllerV3.UserInfo memory user = _getUserInfo(_pid, msg.sender);\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n\\n        _claimRewards(_pid, msg.sender, user, pool);\\n\\n        uint userBalance = user.amount.sub(_amount);\\n        _userInfo[_pid][msg.sender] = UserInfoV3({\\n            amount : userBalance,\\n            rewardDebt : userBalance.mul(pool.accumulatedFatePerShare).div(1e12),\\n            lockedRewardDebt : userBalance.mul(pool.accumulatedLockedFatePerShare).div(1e12),\\n            isUpdated : true\\n        });\\n\\n        uint256 withdrawAmount = _reduceWithdrawalForFeesAndUpdateMembershipInfo(\\n            _pid,\\n            msg.sender,\\n            _amount,\\n            userBalance == 0\\n        );\\n\\n        // send Fee to FeeTokenConverterToFate\\n        if (_amount > withdrawAmount) {\\n            uint256 feeAmount = _amount.sub(withdrawAmount);\\n            pool.lpToken.safeTransfer(fateFeeTo, feeAmount);\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, withdrawAmount);\\n        emit Withdraw(msg.sender, _pid, withdrawAmount);\\n    }\\n\\n    // Reduce LPWithdrawFee and record last withdraw block\\n    function _reduceWithdrawalForFeesAndUpdateMembershipInfo(\\n        uint256 _pid,\\n        address _account,\\n        uint256 _amount,\\n        bool _withdrawAll\\n    ) internal returns(uint256) {\\n        MembershipInfo memory membership = userMembershipInfo[_pid][_account];\\n        uint256 firstDepositBlock = membership.firstDepositBlock;\\n\\n        if (_withdrawAll) {\\n            // record points earned and do not earn any more\\n            trackedPoints[_pid][_account] = trackedPoints[_pid][_account]\\n                .add(_getBlocksOfPeriod(_pid, _account, true).mul(POINTS_PER_BLOCK));\\n\\n            firstDepositBlock = 0;\\n        }\\n\\n        userMembershipInfo[_pid][_account] = MembershipInfo({\\n            firstDepositBlock: firstDepositBlock,\\n            lastWithdrawBlock: block.number\\n        });\\n\\n        // minus LPWithdrawFee = amount * (1e18 - lpFee) / 1e18 = amount - amount * lpFee / 1e18\\n        return _amount.sub(_amount.mul(getLPWithdrawFeePercent(_pid, _account)).div(1e18));\\n    }\\n\\n    function _claimRewards(\\n        uint256 _pid,\\n        address _user,\\n        IFateRewardControllerV3.UserInfo memory user,\\n        PoolInfoV3 memory pool\\n    ) internal {\\n        uint256 pendingUnlocked = user.amount\\n            .mul(pool.accumulatedFatePerShare)\\n            .div(1e12)\\n            .sub(user.rewardDebt);\\n\\n        uint256 pendingLocked = user.amount\\n            .mul(pool.accumulatedLockedFatePerShare)\\n            .div(1e12)\\n            .sub(user.lockedRewardDebt);\\n\\n        // implement fee reduction for pendlingLocked\\n        // = pendingLocked * (1e18 - fee) / 1e18 = pendingLocked - pendingLocked * fee / 1e18\\n        pendingLocked = pendingLocked.sub(pendingLocked.mul(getLockedRewardsFeePercent(_pid, _user)).div(1e18));\\n\\n        // recorded locked rewards\\n        userLockedRewards[_pid][_user] = userLockedRewards[_pid][_user].add(pendingLocked);\\n\\n        _safeFateTransfer(_user, pendingUnlocked);\\n        emit ClaimRewards(_user, _pid, pendingUnlocked);\\n    }\\n\\n    // claim any pending rewards from this pool, from msg.sender\\n    function claimReward(uint256 _pid) public {\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        IFateRewardControllerV3.UserInfo memory user = _getUserInfo(_pid, msg.sender);\\n        updatePool(_pid);\\n        _claimRewards(_pid, msg.sender, user, pool);\\n\\n        _userInfo[_pid][msg.sender] = UserInfoV3({\\n            amount : user.amount,\\n            rewardDebt : user.amount.mul(pool.accumulatedFatePerShare).div(1e12),\\n            lockedRewardDebt : user.amount.mul(pool.accumulatedLockedFatePerShare).div(1e12),\\n            isUpdated : true\\n        });\\n    }\\n\\n    // claim any pending rewards from this pool, from msg.sender\\n    function claimRewards(uint256[] calldata _pids) external {\\n        for (uint i = 0; i < _pids.length; i++) {\\n            claimReward(_pids[i]);\\n        }\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfoV3 storage pool = poolInfo[_pid];\\n        IFateRewardControllerV3.UserInfo memory user = _getUserInfo(_pid, msg.sender);\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n\\n        _userInfo[_pid][msg.sender] = UserInfoV3({\\n            amount : 0,\\n            rewardDebt : 0,\\n            lockedRewardDebt : 0,\\n            isUpdated : true\\n        });\\n    }\\n\\n    // Safe fate transfer function, just in case if rounding error causes pool to not have enough FATEs.\\n    function _safeFateTransfer(address _to, uint256 _amount) internal {\\n        uint256 fateBal = fate.balanceOf(address(this));\\n        if (_amount > fateBal) {\\n            fate.transfer(_to, fateBal);\\n        } else {\\n            fate.transfer(_to, _amount);\\n        }\\n    }\\n\\n    function setEmissionSchedule(\\n        IRewardScheduleV3 _emissionSchedule\\n    )\\n    public\\n    onlyOwner {\\n        // pro-rate the pools to the current block, before changing the schedule\\n        massUpdatePools();\\n        emissionSchedule = _emissionSchedule;\\n        emit EmissionScheduleSet(address(_emissionSchedule));\\n    }\\n\\n    function setVault(\\n        address _vault\\n    )\\n    public\\n    override\\n    onlyOwner {\\n        // pro-rate the pools to the current block, before changing the schedule\\n        vault = _vault;\\n        emit VaultSet(_vault);\\n    }\\n\\n    /// @dev calculate Points earned by this user\\n    function userPoints(uint256 _pid, address _user) external view returns (uint256){\\n        if (!isFatePool(_pid)) {\\n            return 0;\\n        } else {\\n            return POINTS_PER_BLOCK\\n                .mul(_getBlocksOfPeriod(_pid, _user, true))\\n                .add(trackedPoints[_pid][_user]);\\n        }\\n    }\\n\\n    /// @dev check if pool is FatePool or not\\n    function isFatePool(uint _pid) internal view returns(bool) {\\n        return _pid < poolInfo.length && address(poolInfo[_pid].lpToken) != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xed9493a4c62b2c42ff8dc84510499d85e8a9ff5b3b7c1e84c52bfe37107987cd\",\"license\":\"MIT\"},\"contracts/fatex/v3/IFateRewardControllerV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../IMigratorChef.sol\\\";\\n\\nabstract contract IFateRewardControllerV3 is Ownable, IMigratorChef {\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 lockedRewardDebt; // Locked reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of FATEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accumulatedFatePerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accumulatedFatePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfoV3 {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. FATEs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that FATEs distribution occurs.\\n        uint256 accumulatedFatePerShare; // Accumulated FATEs per share, times 1e12. See below.\\n        uint256 accumulatedLockedFatePerShare; // Accumulated locked FATEs per share, times 1e12. See below.\\n    }\\n\\n    function fate() external virtual view returns (IERC20);\\n    function vault() external virtual view returns (address);\\n    function migrator() external virtual view returns (IMigratorChef);\\n    function poolInfo(uint _pid) external virtual view returns (\\n        IERC20 lpToken,\\n        uint256 allocPoint,\\n        uint256 lastRewardBlock,\\n        uint256 accumulatedFatePerShare,\\n        uint256 accumulatedLockedFatePerShare\\n    );\\n    function userInfo(uint _pid, address _user) external virtual view returns (uint256 amount, uint256 rewardDebt);\\n    function poolLength() external virtual view returns (uint);\\n    function startBlock() external virtual view returns (uint);\\n    function totalAllocPoint() external virtual view returns (uint);\\n    function pendingUnlockedFate(uint256 _pid, address _user) external virtual view returns (uint256);\\n    function pendingLockedFate(uint256 _pid, address _user) external virtual view returns (uint256);\\n    function allPendingUnlockedFate(address _user) external virtual view returns (uint256);\\n    function allPendingLockedFate(address _user) external virtual view returns (uint256);\\n    function allLockedFate(address _user) external virtual view returns (uint256);\\n\\n    function setMigrator(IMigratorChef _migrator) external virtual;\\n    function setVault(address _vault) external virtual;\\n    function migrate(uint256 _pid) external virtual;\\n}\\n\",\"keccak256\":\"0x8eddff0ae1baa51728ac2617250df3bafe624846e1b3b0537fa811e45d5a7ee3\",\"license\":\"MIT\"},\"contracts/fatex/v3/IRewardScheduleV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRewardScheduleV3 {\\n\\n    function getFatePerBlock(\\n        uint _startBlock,\\n        uint _fromBlock,\\n        uint _toBlock\\n    )\\n    external\\n    view\\n    returns (uint lockedFatePerBlock, uint unlockedFatePerBlock);\\n\\n\\n    function calculateCurrentIndex(\\n        uint _startBlock\\n    )\\n    external\\n    view\\n    returns (uint);\\n\\n    function epochStartBlock() external view returns (uint);\\n    function epochEndBlock() external view returns (uint);\\n    function lockedPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xab883bbce6fe82d32cf6f74fc370229a7fb68d9e5c684bac19fc0339b31a98d3\",\"license\":\"MIT\"},\"contracts/fatex/v3/MembershipWithReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../../libraries/RankedArray.sol\\\";\\n\\nimport \\\"./IRewardScheduleV3.sol\\\";\\nimport \\\"./IFateRewardControllerV3.sol\\\";\\n\\nabstract contract MembershipWithReward is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 constant public POINTS_PER_BLOCK = 0.08e18;\\n\\n    // The emission scheduler that calculates fate per block over a given period\\n    IRewardScheduleV3 public emissionSchedule;\\n\\n    struct MembershipInfo {\\n        uint256 firstDepositBlock; // set when first deposit\\n        uint256 lastWithdrawBlock; // set when first deposit, updates whenever withdraws\\n    }\\n\\n    mapping(address => bool) public isExcludedAddress;\\n\\n    // pid => address => membershipInfo\\n    mapping(uint256 => mapping (address => MembershipInfo)) public userMembershipInfo;\\n\\n    // pid ==> address ==> tracked points\\n    mapping(uint256 => mapping (address => uint256)) public trackedPoints;\\n\\n    /// @dev pid => user address => lockedRewards\\n    mapping(uint256 => mapping (address => uint256)) public userLockedRewards;\\n\\n    /// @dev data for FateLockedRewardFee\\n    uint256[] public lockedRewardsPeriodBlocks = [\\n        30,\\n        60,\\n        120,\\n        3600,\\n        86400,\\n        172800,\\n        259200,\\n        345600,\\n        432000,\\n        518400,\\n        604800,\\n        691200,\\n        777600,\\n        864000,\\n        950400,\\n        1036800,\\n        1123200,\\n        1209600,\\n        1296000,\\n        1382400,\\n        1468800,\\n        1555200\\n    ];\\n    uint256[] public lockedRewardsFeePercents = [\\n        1e18,\\n        0.98e18,\\n        0.97e18,\\n        0.9e18,\\n        0.8e18,\\n        0.88e18,\\n        0.8e18,\\n        0.72e18,\\n        0.63e18,\\n        0.58e18,\\n        0.5e18,\\n        0.45e18,\\n        0.4e18,\\n        0.35e18,\\n        0.3e18,\\n        0.25e18,\\n        0.2e18,\\n        0.15e18,\\n        0.08e18,\\n        0.036e18,\\n        0.018e18,\\n        0.008e18\\n    ];\\n\\n    /// @dev data for LPWithdrawFee\\n    uint256[] public lpWithdrawPeriodBlocks = [\\n        30,\\n        60,\\n        120,\\n        3600,\\n        86400,\\n        172800,\\n        259200,\\n        345600,\\n        432000,\\n        518400,\\n        604800,\\n        691200,\\n        777600,\\n        864000,\\n        950400,\\n        1036800,\\n        1123200,\\n        1209600,\\n        1296000,\\n        1382400,\\n        1468800,\\n        1555200\\n    ];\\n    uint256[] public lpWithdrawFeePercent = [\\n        0.88e18,\\n        0.72e18,\\n        0.36e18,\\n        0.18e18,\\n        0.0888e18,\\n        0.036e18,\\n        0.036e18,\\n        0.036e18,\\n        0.036e18,\\n        0.036e18,\\n        0.036e18,\\n        0.018e18,\\n        0.018e18,\\n        0.018e18,\\n        0.018e18,\\n        0.018e18,\\n        0.018e18,\\n        0.018e18,\\n        0e18,\\n        0e18,\\n        0e18,\\n        0e18\\n    ];\\n\\n    event LockedRewardsDataSet(uint256[] _lockedRewardsPeriodBlocks, uint256[] _lockedRewardsFeePercents);\\n    event LPWithdrawDataSet(uint256[] _lpWithdrawPeriodBlocks, uint256[] _lpWithdrawFeePercent);\\n    event ExcludedAddressSet(address _account, bool _status);\\n\\n    /// @dev set lockedRewardsPeriodBlocks & lockedRewardsFeePercents\\n    function setLockedRewardsData(\\n        uint256[] memory _lockedRewardsPeriodBlocks,\\n        uint256[] memory _lockedRewardsFeePercents\\n    ) external onlyOwner {\\n        require(\\n            _lockedRewardsPeriodBlocks.length > 0 &&\\n            _lockedRewardsPeriodBlocks.length == _lockedRewardsFeePercents.length,\\n            \\\"setLockedRewardsData: invalid input data\\\"\\n        );\\n        lockedRewardsPeriodBlocks = _lockedRewardsPeriodBlocks;\\n        lockedRewardsFeePercents = _lockedRewardsFeePercents;\\n\\n        emit LockedRewardsDataSet(_lockedRewardsPeriodBlocks, _lockedRewardsFeePercents);\\n    }\\n\\n    /// @dev set lpWithdrawPeriodBlocks & lpWithdrawFeePercent\\n    function setLPWithdrawData(\\n        uint256[] memory _lpWithdrawPeriodBlocks,\\n        uint256[] memory _lpWithdrawFeePercent\\n    ) external onlyOwner {\\n        require(\\n            _lpWithdrawPeriodBlocks.length == _lpWithdrawFeePercent.length,\\n            \\\"setLPWithdrawData: not same length\\\"\\n        );\\n        lpWithdrawPeriodBlocks = _lpWithdrawPeriodBlocks;\\n        lpWithdrawFeePercent = _lpWithdrawFeePercent;\\n\\n        emit LPWithdrawDataSet(_lpWithdrawPeriodBlocks, _lpWithdrawFeePercent);\\n    }\\n\\n    /// @dev set excluded addresses\\n    function setExcludedAddresses(address[] memory accounts, bool[] memory status) external onlyOwner {\\n        require(\\n            accounts.length > 0 &&\\n            accounts.length == status.length,\\n            \\\"setExcludedAddresses: invalid data\\\"\\n        );\\n        for (uint i = 0; i < accounts.length; i++) {\\n            isExcludedAddress[accounts[i]] = status[i];\\n            emit ExcludedAddressSet(accounts[i], status[i]);\\n        }\\n    }\\n\\n    /// @dev calculate index of LockedRewardFee data\\n    function _getPercentFromBlocks(\\n        uint256 periodBlocks,\\n        uint256[] memory blocks,\\n        uint256[] memory percents\\n    ) internal pure returns(uint256) {\\n        if (periodBlocks < blocks[0]) {\\n            return percents[0];\\n        } else if (periodBlocks > blocks[blocks.length - 1]) {\\n            return 0;\\n        } else {\\n            for (uint i = 0; i < blocks.length - 1; i++) {\\n                if (\\n                    periodBlocks > blocks[i] &&\\n                    periodBlocks <= blocks[i + 1]\\n                ) {\\n                    return percents[i];\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getBlocksOfPeriod(\\n        uint256 _pid,\\n        address _user,\\n        bool _isDepositPeriod\\n    ) internal view returns (uint256) {\\n        uint256 epochEndBlock = emissionSchedule.epochEndBlock();\\n        uint256 endBlock = block.number > epochEndBlock ? epochEndBlock : block.number;\\n        uint256 startBlock = _isDepositPeriod ?\\n            userMembershipInfo[_pid][_user].firstDepositBlock : userMembershipInfo[_pid][_user].lastWithdrawBlock;\\n\\n        uint256 blocks = 0;\\n        if (startBlock != 0 && endBlock >= startBlock) {\\n            blocks = endBlock - startBlock ;\\n        }\\n        return blocks;\\n    }\\n\\n    /// @dev calculate percent of lockedRewardFee based on their deposit period\\n    /// when withdraw during epoch, this fee will be reduced from member's lockedRewards\\n    /// this fee does not work for excluded address and after epoch is ended\\n    function getLockedRewardsFeePercent(\\n        uint256 _pid,\\n        address _caller\\n    ) public view returns(uint256) {\\n        if (\\n            isExcludedAddress[_caller] ||\\n            block.number > emissionSchedule.epochEndBlock()\\n        ) {\\n            return 0;\\n        } else {\\n            return _getPercentFromBlocks(\\n                _getBlocksOfPeriod(\\n                    _pid,\\n                    _caller,\\n                    true\\n                ),\\n                lockedRewardsPeriodBlocks,\\n                lockedRewardsFeePercents\\n            );\\n        }\\n    }\\n\\n    /// @dev calculate percent of lpWithdrawFee based on their deposit period\\n    /// when users withdaw during epoch, this fee will be reduced from their withdrawAmount\\n    /// this fee will be still stored on FateRewardControllerV3 contract\\n    /// this fee does not work for excluded address and after epoch is ended\\n    function getLPWithdrawFeePercent(\\n        uint256 _pid,\\n        address _caller\\n    ) public view returns(uint256) {\\n        if (\\n            isExcludedAddress[_caller] ||\\n            block.number > emissionSchedule.epochEndBlock()\\n        ) {\\n            return 0;\\n        } else {\\n            return _getPercentFromBlocks(\\n                _getBlocksOfPeriod(\\n                    _pid,\\n                    _caller,\\n                    false\\n                ),\\n                lpWithdrawPeriodBlocks,\\n                lpWithdrawFeePercent\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7e8596298b8119899fb9d66ee13b604e9ad53820aefab2022ab1bc9fcd98ddf\",\"license\":\"MIT\"},\"contracts/libraries/RankedArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\nlibrary RankedArray {\\n    function quickSort(uint[] memory arr, int left, int right) internal pure {\\n        int i = left;\\n        int j = right;\\n        if (i == j) return;\\n        uint pivot = arr[uint(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint(i)] < pivot) i++;\\n            while (pivot < arr[uint(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) {\\n            quickSort(arr, left, j);\\n        }\\n        if (i < right) {\\n            quickSort(arr, i, right);\\n        }\\n    }\\n\\n    function sort(uint[] memory data) internal pure returns (uint[] memory) {\\n        quickSort(data, int(0), int(data.length - 1));\\n        return data;\\n    }\\n\\n    function getIndex(uint[] memory data, uint num) internal pure returns (uint index) {\\n        index = data.length;\\n        for(uint i = 0; i < data.length; i++) {\\n            if (data[i] == num) {\\n                index = i;\\n            }\\n        }\\n    }\\n\\n    function getIndexOfAddressArray(address[] memory data, address addr) internal pure returns (uint256 index) {\\n        index = data.length;\\n        for (uint i=0; i < data.length; i++) {\\n            if (data[i] == addr) index = i;\\n        }\\n    }\\n}\",\"keccak256\":\"0x9a3cb0fcaf55b19d2e208c49cee9acc24332b14723f9f776639ed5aadb0bbd80\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610340604052601e6080908152603c60a052607860c052610e1060e05262015180610100526202a300610120526203f48061014052620546006101605262069780610180526207e9006101a05262093a806101c052620a8c006101e052620bdd8061020052620d2f0061022052620e808061024052620fd200610260526211238061028052621275006102a0526213c6806102c052621518006102e05262166980610300526217bb0061032052620000bc90600690601662000813565b50604080516102c081018252670de0b6b3a76400008152670d99a8cec7e200006020820152670d7621dc5821000091810191909152670c7d713b49da00006060820152670b1a2bc2ec50000060808201819052670c3663566a58000060a083015260c08201526709fdf42f6e48000060e08201526708be35a9807f000061010082015267080c92ed51ba00006101208201526706f05b59d3b2000061014082015267063eb89da4ed000061016082015267058d15e1762800006101808201526704db7325476300006101a0820152670429d069189e00006101c08201526703782dace9d900006101e08201526702c68af0bb140000610200820152670214e8348c4f000061022082015267011c37937e080000610240820152667fe5cf2bea0000610260820152663ff2e795f50000610280820152661c6bf5263400006102a08201526200020f9060079060166200086a565b50604080516102c081018252601e8152603c6020820152607891810191909152610e1060608201526201518060808201526202a30060a08201526203f48060c08201526205460060e0820152620697806101008201526207e90061012082015262093a80610140820152620a8c00610160820152620bdd80610180820152620d2f006101a0820152620e80806101c0820152620fd2006101e082015262112380610200820152621275006102208201526213c68061024082015262151800610260820152621669806102808201526217bb006102a0820152620002f790600890601662000813565b50604080516102c081018252670c3663566a58000081526709fdf42f6e48000060208201526704fefa17b72400009181019190915267027f7d0bdb920000606082015267013b7b21280e00006080820152667fe5cf2bea000060a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820152663ff2e795f50000610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082015260006102408201819052610260820181905261028082018190526102a0820152620003e99060099060166200086a565b506000601155348015620003fc57600080fd5b50604051620054a2380380620054a2833981810160405260c08110156200042257600080fd5b8151602083015160408085015160608601805192519496939591949391820192846401000000008211156200045657600080fd5b9083019060208201858111156200046c57600080fd5b82518660208202830111640100000000821117156200048a57600080fd5b82525081516020918201928201910280838360005b83811015620004b95781810151838201526020016200049f565b50505050919091016040908152602083015192015191935090915060009050620004e26200080f565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600b80546001600160a01b038089166001600160a01b03199283161790925560018054888416908316179055600c80549287169290911691909117905582516200057e90600d906020860190620008b3565b50601380546001600160a01b0319166001600160a01b03841617905582518390600090620005a857fe5b60200260200101516001600160a01b03166348cd4cb16040518163ffffffff1660e01b815260040160206040518083038186803b158015620005e957600080fd5b505afa158015620005fe573d6000803e3d6000fd5b505050506040513d60208110156200061557600080fd5b5051601255600a80546001600160a01b0319166001600160a01b03831617905560005b836000815181106200064657fe5b60200260200101516001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200068757600080fd5b505afa1580156200069c573d6000803e3d6000fd5b505050506040513d6020811015620006b357600080fd5b5051811015620008025760008085600081518110620006ce57fe5b60200260200101516001600160a01b0316631526fe27846040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b1580156200071a57600080fd5b505afa1580156200072f573d6000803e3d6000fd5b505050506040513d60808110156200074657600080fd5b5080516020918201516040805160a0810182526001600160a01b0384168152938401829052601254908401526000606084018190526080840152600f805492955090935090859081106200079657fe5b600091825260209182902083516005929092020180546001600160a01b0319166001600160a01b03909216919091178155908201516001808301919091556040830151600283015560608301516003830155608090920151600490910155929092019150620006389050565b5050505050505062000951565b3390565b82805482825590600052602060002090810192821562000858579160200282015b8281111562000858578251829062ffffff1690559160200191906001019062000834565b506200086692915062000919565b5090565b82805482825590600052602060002090810192821562000858579160200282015b828111156200085857825182906001600160401b03169055916020019190600101906200088b565b8280548282559060005260206000209081019282156200090b579160200282015b828111156200090b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620008d4565b506200086692915062000930565b5b808211156200086657600081556001016200091a565b5b80821115620008665780546001600160a01b031916815560010162000931565b614b4180620009616000396000f3fe608060405234801561001057600080fd5b506004361061034c5760003560e01c8063680bd2ea116101bd578063ad68533f116100f9578063d7414a09116100a2578063f2fde38b1161007c578063f2fde38b14610d12578063fa0c67e414610d38578063fbfa77cf14610d5e578063fe1a8b4814610d665761034c565b8063d7414a0914610cca578063e2bbb15814610ce7578063ed51e69c14610d0a5761034c565b8063b37d97b5116100d3578063b37d97b514610c0e578063b72e4ae914610c7e578063ce5494bb14610ca45761034c565b8063ad68533f14610bae578063ae169a5014610bd4578063af16e89414610bf15761034c565b80637cd07e4711610166578063939544e811610140578063939544e814610a1257806393f1a40b14610a2f5780639bf195bb14610a5b5780639c10bd5e14610b825761034c565b80637cd07e47146109d65780637da38cf9146109de5780638da5cb5b14610a0a5761034c565b8063715018a611610197578063715018a61461099a57806373916d4d146109a25780637c86ac23146109ce5761034c565b8063680bd2ea146109315780636817031b1461094e5780636be986ba146109745761034c565b80633c97d8441161028c578063497ca549116102355780635eac62391161020f5780635eac6239146108865780635ee5cafd146108f6578063630b5ba1146108fe57806364482f79146109065761034c565b8063497ca5491461082057806351eb05a61461084c5780635312ea8e146108695761034c565b8063441a3e7011610266578063441a3e70146107d8578063454b0608146107fb57806348cd4cb1146108185761034c565b80633c97d8441461076e5780633ce39b63146107b357806340322944146107bb5761034c565b80631d465c82116102f957806323cf3118116102d357806323cf3118146105bb57806324a176bb146105e1578063260edf381461061b5780632d6dcd4b146106475761034c565b80631d465c821461053e5780631eaaa0451461055b57806321d947f21461058f5761034c565b80631526fe271161032a5780631526fe27146104c057806317caf6f1146105125780631c7036551461051a5761034c565b806305b412ae14610351578063081e3eda1461038f578063130c3e8414610397575b600080fd5b61037d6004803603604081101561036757600080fd5b50803590602001356001600160a01b0316610d8c565b60408051918252519081900360200190f35b61037d610f9b565b6104be600480360360408110156103ad57600080fd5b8101906020810181356401000000008111156103c857600080fd5b8201836020820111156103da57600080fd5b803590602001918460208302840111640100000000831117156103fc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561044c57600080fd5b82018360208201111561045e57600080fd5b8035906020019184602083028401116401000000008311171561048057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610fa1945050505050565b005b6104dd600480360360208110156104d657600080fd5b503561114e565b604080516001600160a01b03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b61037d611196565b61052261119c565b604080516001600160a01b039092168252519081900360200190f35b61037d6004803603602081101561055457600080fd5b50356111ab565b6104be6004803603606081101561057157600080fd5b508035906001600160a01b03602082013516906040013515156112c1565b61037d600480360360408110156105a557600080fd5b50803590602001356001600160a01b0316611340565b6104be600480360360208110156105d157600080fd5b50356001600160a01b031661135d565b610607600480360360208110156105f757600080fd5b50356001600160a01b0316611433565b604080519115158252519081900360200190f35b61037d6004803603604081101561063157600080fd5b50803590602001356001600160a01b0316611448565b6104be6004803603604081101561065d57600080fd5b81019060208101813564010000000081111561067857600080fd5b82018360208201111561068a57600080fd5b803590602001918460208302840111640100000000831117156106ac57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156106fc57600080fd5b82018360208201111561070e57600080fd5b8035906020019184602083028401116401000000008311171561073057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506114b1945050505050565b61079a6004803603604081101561078457600080fd5b50803590602001356001600160a01b031661164c565b6040805192835260208301919091528051918290030190f35b610522611670565b61037d600480360360208110156107d157600080fd5b503561167f565b6104be600480360360408110156107ee57600080fd5b508035906020013561169d565b6104be6004803603602081101561081157600080fd5b50356118f7565b61037d611bd5565b61037d6004803603604081101561083657600080fd5b50803590602001356001600160a01b0316611bdb565b6104be6004803603602081101561086257600080fd5b5035611dcd565b6104be6004803603602081101561087f57600080fd5b50356120a4565b6104be6004803603602081101561089c57600080fd5b8101906020810181356401000000008111156108b757600080fd5b8201836020820111156108c957600080fd5b803590602001918460208302840111640100000000831117156108eb57600080fd5b5090925090506121ac565b61037d6121da565b6104be6121e6565b6104be6004803603606081101561091c57600080fd5b50803590602081013590604001351515612209565b61037d6004803603602081101561094757600080fd5b5035612328565b6104be6004803603602081101561096457600080fd5b50356001600160a01b0316612335565b6104be6004803603602081101561098a57600080fd5b50356001600160a01b031661240b565b6104be6124e9565b61037d600480360360408110156109b857600080fd5b50803590602001356001600160a01b03166125bf565b6105226125dc565b6105226125eb565b61037d600480360360408110156109f457600080fd5b50803590602001356001600160a01b03166125fa565b61052261275c565b61037d60048036036020811015610a2857600080fd5b503561276b565b61079a60048036036040811015610a4557600080fd5b50803590602001356001600160a01b0316612778565b6104be60048036036040811015610a7157600080fd5b810190602081018135640100000000811115610a8c57600080fd5b820183602082011115610a9e57600080fd5b80359060200191846020830284011164010000000083111715610ac057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610b1057600080fd5b820183602082011115610b2257600080fd5b80359060200191846020830284011164010000000083111715610b4457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506127e4945050505050565b61037d60048036036040811015610b9857600080fd5b50803590602001356001600160a01b0316612933565b61037d60048036036020811015610bc457600080fd5b50356001600160a01b0316612a93565b6104be60048036036020811015610bea57600080fd5b5035612ac7565b61052260048036036020811015610c0757600080fd5b5035612c28565b6104be60048036036020811015610c2457600080fd5b810190602081018135640100000000811115610c3f57600080fd5b820183602082011115610c5157600080fd5b80359060200191846020830284011164010000000083111715610c7357600080fd5b509092509050612c4f565b6104be60048036036020811015610c9457600080fd5b50356001600160a01b0316612d29565b61052260048036036020811015610cba57600080fd5b50356001600160a01b0316612e6a565b61037d60048036036020811015610ce057600080fd5b5035613375565b6104be60048036036040811015610cfd57600080fd5b5080359060200135613382565b610522613664565b6104be60048036036020811015610d2857600080fd5b50356001600160a01b0316613673565b61037d60048036036020811015610d4e57600080fd5b50356001600160a01b031661379f565b6105226137ec565b61037d60048036036020811015610d7c57600080fd5b50356001600160a01b03166137fb565b600080600f8481548110610d9c57fe5b90600052602060002090600502019050610db461490d565b610dbe8585613821565b60038301548354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945091926000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d6020811015610e5757600080fd5b5051600285015490915043118015610e6e57508015155b15610f60576001546012546002860154604080517ffb4c0e490000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915243604483015280516000936001600160a01b03169263fb4c0e49926064808301939192829003018186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d6040811015610f1657600080fd5b50516011546001870154919250600091610f3c9190610f369085906138aa565b9061390a565b9050610f5b610f5484610f368464e8d4a510006138aa565b8590613971565b935050505b610f8e8360400151610f8864e8d4a51000610f368688600001516138aa90919063ffffffff16565b906139cb565b9450505050505b92915050565b600f5490565b610fa9613a28565b6001600160a01b0316610fba61275c565b6001600160a01b031614611015576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008251118015611027575080518251145b6110625760405162461bcd60e51b81526004018080602001828103825260228152602001806149f96022913960400191505060405180910390fd5b60005b82518110156111495781818151811061107a57fe5b60200260200101516002600085848151811061109257fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f33e99dbd8a2fdf021abaf8531c98838a37f8e85fd3cbf0e897047074f9c4ecf48382815181106110fe57fe5b602002602001015183838151811061111257fe5b602002602001015160405180836001600160a01b0316815260200182151581526020019250505060405180910390a1600101611065565b505050565b600f818154811061115b57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b60115481565b600b546001600160a01b031681565b600154601254604080517ffb4c0e490000000000000000000000000000000000000000000000000000000081526004810192909252437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160248401526044830152805160009384936001600160a01b039091169263fb4c0e4992606480840193829003018186803b15801561124157600080fd5b505afa158015611255573d6000803e3d6000fd5b505050506040513d604081101561126b57600080fd5b506020015190508261127e5790506112bc565b6112b8601154610f36600f600187038154811061129757fe5b906000526020600020906005020160010154846138aa90919063ffffffff16565b9150505b919050565b6112c9613a28565b6001600160a01b03166112da61275c565b6001600160a01b031614611335576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b611149838383613a2c565b600460209081526000928352604080842090915290825290205481565b611365613a28565b6001600160a01b031661137661275c565b6001600160a01b0316146113d1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f3ba4758949febc607e14523620298f8b5995b1848492ad7aa083372ac886ae0790600090a250565b60026020526000908152604090205460ff1681565b600061145383613d63565b61145f57506000610f95565b60008381526004602090815260408083206001600160a01b03861684529091529020546114aa906114a461149586866001613dac565b67011c37937e080000906138aa565b90613971565b9050610f95565b6114b9613a28565b6001600160a01b03166114ca61275c565b6001600160a01b031614611525576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b80518251146115655760405162461bcd60e51b8152600401808060200182810382526022815260200180614a416022913960400191505060405180910390fd5b815161157890600890602085019061492e565b50805161158c90600990602084019061492e565b507fb98beea609c022b668575d643522cbe42a42af191702c418515c145974802fab8282604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156115f45781810151838201526020016115dc565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561163357818101518382015260200161161b565b5050505090500194505050505060405180910390a15050565b60036020908152600092835260408084209091529082529020805460019091015482565b6013546001600160a01b031681565b6008818154811061168c57fe5b600091825260209091200154905081565b6000600f83815481106116ac57fe5b906000526020600020906005020190506116c461490d565b6116ce8433613821565b90508281600001511015611729576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61173284611dcd565b6040805160a08101825283546001600160a01b0316815260018401546020820152600284015491810191909152600383015460608201526004830154608082015261178290859033908490613ebc565b805160009061179190856139cb565b905060405180608001604052808281526020016117c464e8d4a51000610f368760030154866138aa90919063ffffffff16565b81526020016117e964e8d4a51000610f368760040154866138aa90919063ffffffff16565b8152600160209182018190526000888152601083526040808220338084529085528183208651815594860151938501939093558401516002840155606090930151600390920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915561186b908790878515613feb565b9050808511156118a257600061188186836139cb565b600a5486549192506118a0916001600160a01b03908116911683614116565b505b83546118b8906001600160a01b03163383614116565b604080518281529051879133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600e546001600160a01b0316611954576040805162461bcd60e51b815260206004820152601460248201527f6d6967726174653a206e6f206d69677261746f72000000000000000000000000604482015290519081900360640190fd5b6000600f828154811061196357fe5b6000918252602080832060059092029091018054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519295506001600160a01b03909116939284926370a08231926024808201939291829003018186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d6020811015611a0457600080fd5b5051600e54909150611a23906001600160a01b03848116911683614196565b600e54604080517fce5494bb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b158015611a8e57600080fd5b505af1158015611aa2573d6000803e3d6000fd5b505050506040513d6020811015611ab857600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015611b1d57600080fd5b505afa158015611b31573d6000803e3d6000fd5b505050506040513d6020811015611b4757600080fd5b50518214611b9c576040805162461bcd60e51b815260206004820152600c60248201527f6d6967726174653a206261640000000000000000000000000000000000000000604482015290519081900360640190fd5b83547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039190911617909255505050565b60125481565b600080600f8481548110611beb57fe5b90600052602060002090600502019050611c0361490d565b611c0d8585613821565b60038301548354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945091926000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d6020811015611ca657600080fd5b5051600285015490915043118015611cbd57508015155b15611da5576001546012546002860154604080517ffb4c0e490000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915243604483015280516000936001600160a01b03169263fb4c0e49926064808301939192829003018186803b158015611d3b57600080fd5b505afa158015611d4f573d6000803e3d6000fd5b505050506040513d6040811015611d6557600080fd5b50602001516011546001870154919250600091611d889190610f369085906138aa565b9050611da0610f5484610f368464e8d4a510006138aa565b935050505b610f8e8360200151610f8864e8d4a51000610f368688600001516138aa90919063ffffffff16565b6000600f8281548110611ddc57fe5b9060005260206000209060050201905080600201544311611dfd57506120a1565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e6057600080fd5b505afa158015611e74573d6000803e3d6000fd5b505050506040513d6020811015611e8a57600080fd5b5051905080611ea05750436002909101556120a1565b6001546012546002840154604080517ffb4c0e4900000000000000000000000000000000000000000000000000000000815260048101939093526024830191909152436044830152805160009384936001600160a01b039091169263fb4c0e4992606480840193829003018186803b158015611f1b57600080fd5b505afa158015611f2f573d6000803e3d6000fd5b505050506040513d6040811015611f4557600080fd5b5080516020909101516011546001870154929450909250600091611f6f9190610f369085906138aa565b90506000611f90601154610f368860010154876138aa90919063ffffffff16565b9050811561206457600b54600c54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015230602482015260448101869052905191909216916323b872dd9160648083019260209291908290030181600087803b15801561201057600080fd5b505af1158015612024573d6000803e3d6000fd5b505050506040513d602081101561203a57600080fd5b5061205e905061205386610f368564e8d4a510006138aa565b600388015490613971565b60038701555b80156120915761208b61208086610f368464e8d4a510006138aa565b600488015490613971565b60048701555b4386600201819055505050505050505b50565b6000600f82815481106120b357fe5b906000526020600020906005020190506120cb61490d565b6120d58333613821565b805183549192506120f1916001600160a01b0316903390614116565b80516040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506040805160808101825260008082526020808301828152838501838152600160608601818152978552601084528685203386529093529490922092518355905190820155905160028201559051600390910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005b81811015611149576121d28383838181106121c657fe5b90506020020135612ac7565b6001016121af565b67011c37937e08000081565b600f5460005b81811015612205576121fd81611dcd565b6001016121ec565b5050565b612211613a28565b6001600160a01b031661222261275c565b6001600160a01b03161461227d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b801561228b5761228b6121e6565b6122c2826114a4600f868154811061229f57fe5b9060005260206000209060050201600101546011546139cb90919063ffffffff16565b60118190555081600f84815481106122d657fe5b906000526020600020906005020160010181905550827f144685f4a2c1908fdcb1c5450bfadd3b08aa5071d5df19d1a9b54c0de1d061b0836040518082815260200191505060405180910390a2505050565b6006818154811061168c57fe5b61233d613a28565b6001600160a01b031661234e61275c565b6001600160a01b0316146123a9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fe7ae49f883c825b05681b3e00e8be6fdea9ed2a8a45e4c6ecb9390fc44cce61590600090a250565b612413613a28565b6001600160a01b031661242461275c565b6001600160a01b03161461247f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6124876121e6565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f2c342266e3979163d824140326453c8bf5592ad2f774a58222ea35b5c0bfc77490600090a250565b6124f1613a28565b6001600160a01b031661250261275c565b6001600160a01b03161461255d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600560209081526000928352604080842090915290825290205481565b600a546001600160a01b031681565b600e546001600160a01b031681565b6001600160a01b03811660009081526002602052604081205460ff16806126995750600160009054906101000a90046001600160a01b03166001600160a01b0316634e3b84806040518163ffffffff1660e01b815260040160206040518083038186803b15801561266a57600080fd5b505afa15801561267e573d6000803e3d6000fd5b505050506040513d602081101561269457600080fd5b505143115b156126a657506000610f95565b6114aa6126b584846000613dac565b600880548060200260200160405190810160405280929190818152602001828054801561270157602002820191906000526020600020905b8154815260200190600101908083116126ed575b5050505050600980548060200260200160405190810160405280929190818152602001828054801561275257602002820191906000526020600020905b81548152602001906001019080831161273e575b50505050506142f0565b6000546001600160a01b031690565b6007818154811061168c57fe5b600080612783614979565b50505060009182526010602090815260408084206001600160a01b039390931684529181529181902081516080810183528154808252600183015494820185905260028301549382019390935260039091015460ff16151560609091015291565b6127ec613a28565b6001600160a01b03166127fd61275c565b6001600160a01b031614612858576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000825111801561286a575080518251145b6128a55760405162461bcd60e51b8152600401808060200182810382526028815260200180614a846028913960400191505060405180910390fd5b81516128b890600690602085019061492e565b5080516128cc90600790602084019061492e565b507f595a216dcbf780f171bb88fc4258b2683b5e1bc252a2d1741de1b7e63d16361c828260405180806020018060200183810383528581815181526020019150805190602001906020028083836000838110156115f45781810151838201526020016115dc565b6001600160a01b03811660009081526002602052604081205460ff16806129d25750600160009054906101000a90046001600160a01b03166001600160a01b0316634e3b84806040518163ffffffff1660e01b815260040160206040518083038186803b1580156129a357600080fd5b505afa1580156129b7573d6000803e3d6000fd5b505050506040513d60208110156129cd57600080fd5b505143115b156129df57506000610f95565b6114aa6129ee84846001613dac565b6006805480602002602001604051908101604052809291908181526020018280548015612a3a57602002820191906000526020600020905b815481526020019060010190808311612a26575b50505050506007805480602002602001604051908101604052809291908181526020018280548015612752576020028201919060005260206000209081548152602001906001019080831161273e5750505050506142f0565b600080805b600f54811015612ac057612ab6612aaf8286611bdb565b8390613971565b9150600101612a98565b5092915050565b6000600f8281548110612ad657fe5b90600052602060002090600502019050612aee61490d565b612af88333613821565b9050612b0383611dcd565b6040805160a08101825283546001600160a01b03168152600184015460208201526002840154918101919091526003830154606082015260048301546080820152612b5390849033908490613ebc565b604051806080016040528082600001518152602001612b8c64e8d4a51000610f36866003015486600001516138aa90919063ffffffff16565b8152602001612bb564e8d4a51000610f36866004015486600001516138aa90919063ffffffff16565b815260016020918201819052600095865260108252604080872033885283529586902083518155918301519082015593810151600285015560600151600390930180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092555050565b600d8181548110612c3557fe5b6000918252602090912001546001600160a01b0316905081565b612c57613a28565b6001600160a01b0316612c6861275c565b6001600160a01b031614612cc3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805b82811015612d23577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83018114612d1a83868685818110612d0457fe5b905060200201356001600160a01b031683613a2c565b50600101612cc7565b50505050565b612d31613a28565b6001600160a01b0316612d4261275c565b6001600160a01b031614612d9d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612df8576040805162461bcd60e51b815260206004820152601b60248201527f73657446617465466565546f3a20696e76616c696420666565546f0000000000604482015290519081900360640190fd5b600a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03838116919091179182905560408051929091168252517fc1edef4fd3f93cab397dfcab6c344127557f4a3cd4d69731cb0cfac9722f47fe916020908290030190a150565b600080805b600d54811015612ed857336001600160a01b0316600d8281548110612e9057fe5b6000918252602090912001546001600160a01b03161415612ed057600d8181548110612eb857fe5b6000918252602090912001546001600160a01b031691505b600101612e6f565b506001600160a01b038116612f34576040805162461bcd60e51b815260206004820152601760248201527f6d6967726174653a20696e76616c69642073656e646572000000000000000000604482015290519081900360640190fd5b6000806000806000856001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d6020811015612f9f57600080fd5b5051905060005b8181101561305f57866001600160a01b0316631526fe27600f805490506040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b158015612ff757600080fd5b505afa15801561300b573d6000803e3d6000fd5b505050506040513d608081101561302157600080fd5b50805160208201516040830151606090930151919850965090945092506001600160a01b03808716908a1614156130575761305f565b600101612fa6565b506130f033308a6001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156130b257600080fd5b505afa1580156130c6573d6000803e3d6000fd5b505050506040513d60208110156130dc57600080fd5b50516001600160a01b038c169291906143c9565b6040805160a0810182526001600160a01b038781168252602080830188815283850188815260608501888152600060808701818152600f80546001810182559281905297517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802600590930292830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691891691909117905593517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80382015591517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac804830155517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80582015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80690910155915483518881529351918c16937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91909101927f6c5d0ef1d0199b6de41ecbce95f59643be4d723ca363faf92d756e61e82fb13e92918290030190a36000805b600f548110156132c8576132be600f828154811061329d57fe5b9060005260206000209060050201600101548361397190919063ffffffff16565b9150600101613283565b506011819055601354604080517f3e68680a0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015230602483015291519190921691633e68680a9160448083019260209291908290030181600087803b15801561333c57600080fd5b505af1158015613350573d6000803e3d6000fd5b505050506040513d602081101561336657600080fd5b50519998505050505050505050565b6009818154811061168c57fe5b6000600f838154811061339157fe5b906000526020600020906005020190506133a961490d565b6133b38433613821565b90506133be84611dcd565b805115613415576040805160a08101825283546001600160a01b0316815260018401546020820152600284015491810191909152600383015460608201526004830154608082015261341590859033908490613ebc565b815461342c906001600160a01b03163330866143c9565b805160009061343b9085613971565b9050604051806080016040528082815260200161346e64e8d4a51000610f368760030154866138aa90919063ffffffff16565b815260200161349364e8d4a51000610f368760040154866138aa90919063ffffffff16565b81526001602091820181905260008881526010835260408082203383528452908190208451815592840151918301919091558201516002820155606090910151600390910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905561350d6149a3565b506000858152600360209081526040808320338452825291829020825180840184528154815260019182015481840152905483517f4e3b8480000000000000000000000000000000000000000000000000000000008152935191936001600160a01b0390911692634e3b848092600480840193829003018186803b15801561359457600080fd5b505afa1580156135a8573d6000803e3d6000fd5b505050506040513d60208110156135be57600080fd5b505143118015906135ce57508051155b1561362557604051806040016040528043815260200160008360200151116135f657436135fc565b82602001515b905260008781526003602090815260408083203384528252909120825181559101516001909101555b604080518681529051879133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050505050565b6001546001600160a01b031681565b61367b613a28565b6001600160a01b031661368c61275c565b6001600160a01b0316146136e7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661372c5760405162461bcd60e51b81526004018080602001828103825260268152602001806149d36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080805b600f54811015612ac05760008181526005602090815260408083206001600160a01b03881684529091529020546137e2906114a4610f548488610d8c565b91506001016137a4565b600c546001600160a01b031681565b600080805b600f54811015612ac057613817612aaf8286610d8c565b9150600101613800565b61382961490d565b613831614979565b505060009182526010602090815260408084206001600160a01b03939093168452918152918190208151608081018352815481526001820154818501908152600283015482850190815260039093015460ff16151560608084019190915284519081018552915182525193810193909352519082015290565b6000826138b957506000610f95565b828202828482816138c657fe5b04146139035760405162461bcd60e51b8152600401808060200182810382526021815260200180614a636021913960400191505060405180910390fd5b9392505050565b6000808211613960576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161396957fe5b049392505050565b600082820183811015613903576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115613a22576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3390565b60005b600f54811015613ac557826001600160a01b0316600f8281548110613a5057fe5b60009182526020909120600590910201546001600160a01b03161415613abd576040805162461bcd60e51b815260206004820152601b60248201527f6164643a204c5020746f6b656e20616c72656164792061646465640000000000604482015290519081900360640190fd5b600101613a2f565b508015613ad457613ad46121e6565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613b2357600080fd5b505afa158015613b37573d6000803e3d6000fd5b505050506040513d6020811015613b4d57600080fd5b50511015613ba2576040805162461bcd60e51b815260206004820152601560248201527f6164643a20696e76616c6964204c5020746f6b656e0000000000000000000000604482015290519081900360640190fd5b60006012544311613bb557601254613bb7565b435b601154909150613bc79085613971565b6011556040805160a0810182526001600160a01b03858116808352602080840189815284860187815260006060870181815260808801828152600f80546001810182559381905298517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802600590940293840180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975592517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80382015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80482015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80582015592517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8069093019290925591548351888152935192937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91909101927f6c5d0ef1d0199b6de41ecbce95f59643be4d723ca363faf92d756e61e82fb13e929181900390910190a350505050565b600f5460009082108015610f95575060006001600160a01b0316600f8381548110613d8a57fe5b60009182526020909120600590910201546001600160a01b0316141592915050565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316634e3b84806040518163ffffffff1660e01b815260040160206040518083038186803b158015613dfd57600080fd5b505afa158015613e11573d6000803e3d6000fd5b505050506040513d6020811015613e2757600080fd5b505190506000438210613e3a5743613e3c565b815b9050600084613e705760008781526003602090815260408083206001600160a01b038a168452909152902060010154613e94565b60008781526003602090815260408083206001600160a01b038a1684529091529020545b905060008115801590613ea75750818310155b15613eb157508082035b979650505050505050565b6000613eea8360200151610f8864e8d4a51000610f36866060015188600001516138aa90919063ffffffff16565b90506000613f1a8460400151610f8864e8d4a51000610f36876080015189600001516138aa90919063ffffffff16565b9050613f46613f3f670de0b6b3a7640000610f36613f388a8a612933565b85906138aa565b82906139cb565b60008781526005602090815260408083206001600160a01b038a168452909152902054909150613f769082613971565b60008781526005602090815260408083206001600160a01b038a168452909152902055613fa38583614451565b60408051838152905187916001600160a01b038816917f674a8930d4166ce2352c3dc1e9ff633595db479f71f3741270a0a73a52cb7b0f9181900360200190a3505050505050565b6000613ff56149a3565b5060008581526003602090815260408083206001600160a01b0388168452825291829020825180840190935280548084526001909101549183019190915283156140ac5761408361405a67011c37937e0800006140548a8a6001613dac565b906138aa565b60008981526004602090815260408083206001600160a01b038c16845290915290205490613971565b60008881526004602090815260408083206001600160a01b038b16845290915281209190915590505b60408051808201825282815243602080830191825260008b8152600382528481206001600160a01b038c16825290915292909220905181559051600190910155613eb161410f670de0b6b3a7640000610f366141088b8b6125fa565b89906138aa565b86906139cb565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261114990849061462c565b8015806142355750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561420757600080fd5b505afa15801561421b573d6000803e3d6000fd5b505050506040513d602081101561423157600080fd5b5051155b6142705760405162461bcd60e51b8152600401808060200182810382526036815260200180614ad66036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261114990849061462c565b6000826000815181106142ff57fe5b602002602001015184101561432a578160008151811061431b57fe5b60200260200101519050613903565b8260018451038151811061433a57fe5b602002602001015184111561435157506000613903565b60005b60018451038110156143c15783818151811061436c57fe5b602002602001015185118015614398575083816001018151811061438c57fe5b60200260200101518511155b156143b9578281815181106143a957fe5b6020026020010151915050613903565b600101614354565b509392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612d2390859061462c565b600b54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156144b557600080fd5b505afa1580156144c9573d6000803e3d6000fd5b505050506040513d60208110156144df57600080fd5b505190508082111561458c57600b54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561455a57600080fd5b505af115801561456e573d6000803e3d6000fd5b505050506040513d602081101561458457600080fd5b506111499050565b600b54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156145fb57600080fd5b505af115801561460f573d6000803e3d6000fd5b505050506040513d602081101561462557600080fd5b5050505050565b6060614681826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146dd9092919063ffffffff16565b805190915015611149578080602001905160208110156146a057600080fd5b50516111495760405162461bcd60e51b815260040180806020018281038252602a815260200180614aac602a913960400191505060405180910390fd5b60606146ec84846000856146f4565b949350505050565b6060824710156147355760405162461bcd60e51b8152600401808060200182810382526026815260200180614a1b6026913960400191505060405180910390fd5b61473e85614863565b61478f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106147ec57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016147af565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461484e576040519150601f19603f3d011682016040523d82523d6000602084013e614853565b606091505b5091509150613eb1828286614869565b3b151590565b60608315614878575081613903565b8251156148885782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156148d25781810151838201526020016148ba565b50505050905090810190601f1680156148ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b828054828255906000526020600020908101928215614969579160200282015b8281111561496957825182559160200191906001019061494e565b506149759291506149bd565b5090565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b604051806040016040528060008152602001600081525090565b5b8082111561497557600081556001016149be56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573737365744578636c756465644164647265737365733a20696e76616c69642064617461416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c7365744c505769746864726177446174613a206e6f742073616d65206c656e677468536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f777365744c6f636b656452657761726473446174613a20696e76616c696420696e70757420646174615361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212209fbf025f77bdc0dc46ab0ff790c047a93690b43aea86e97a90571b0d32e8206f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061034c5760003560e01c8063680bd2ea116101bd578063ad68533f116100f9578063d7414a09116100a2578063f2fde38b1161007c578063f2fde38b14610d12578063fa0c67e414610d38578063fbfa77cf14610d5e578063fe1a8b4814610d665761034c565b8063d7414a0914610cca578063e2bbb15814610ce7578063ed51e69c14610d0a5761034c565b8063b37d97b5116100d3578063b37d97b514610c0e578063b72e4ae914610c7e578063ce5494bb14610ca45761034c565b8063ad68533f14610bae578063ae169a5014610bd4578063af16e89414610bf15761034c565b80637cd07e4711610166578063939544e811610140578063939544e814610a1257806393f1a40b14610a2f5780639bf195bb14610a5b5780639c10bd5e14610b825761034c565b80637cd07e47146109d65780637da38cf9146109de5780638da5cb5b14610a0a5761034c565b8063715018a611610197578063715018a61461099a57806373916d4d146109a25780637c86ac23146109ce5761034c565b8063680bd2ea146109315780636817031b1461094e5780636be986ba146109745761034c565b80633c97d8441161028c578063497ca549116102355780635eac62391161020f5780635eac6239146108865780635ee5cafd146108f6578063630b5ba1146108fe57806364482f79146109065761034c565b8063497ca5491461082057806351eb05a61461084c5780635312ea8e146108695761034c565b8063441a3e7011610266578063441a3e70146107d8578063454b0608146107fb57806348cd4cb1146108185761034c565b80633c97d8441461076e5780633ce39b63146107b357806340322944146107bb5761034c565b80631d465c82116102f957806323cf3118116102d357806323cf3118146105bb57806324a176bb146105e1578063260edf381461061b5780632d6dcd4b146106475761034c565b80631d465c821461053e5780631eaaa0451461055b57806321d947f21461058f5761034c565b80631526fe271161032a5780631526fe27146104c057806317caf6f1146105125780631c7036551461051a5761034c565b806305b412ae14610351578063081e3eda1461038f578063130c3e8414610397575b600080fd5b61037d6004803603604081101561036757600080fd5b50803590602001356001600160a01b0316610d8c565b60408051918252519081900360200190f35b61037d610f9b565b6104be600480360360408110156103ad57600080fd5b8101906020810181356401000000008111156103c857600080fd5b8201836020820111156103da57600080fd5b803590602001918460208302840111640100000000831117156103fc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561044c57600080fd5b82018360208201111561045e57600080fd5b8035906020019184602083028401116401000000008311171561048057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610fa1945050505050565b005b6104dd600480360360208110156104d657600080fd5b503561114e565b604080516001600160a01b03909616865260208601949094528484019290925260608401526080830152519081900360a00190f35b61037d611196565b61052261119c565b604080516001600160a01b039092168252519081900360200190f35b61037d6004803603602081101561055457600080fd5b50356111ab565b6104be6004803603606081101561057157600080fd5b508035906001600160a01b03602082013516906040013515156112c1565b61037d600480360360408110156105a557600080fd5b50803590602001356001600160a01b0316611340565b6104be600480360360208110156105d157600080fd5b50356001600160a01b031661135d565b610607600480360360208110156105f757600080fd5b50356001600160a01b0316611433565b604080519115158252519081900360200190f35b61037d6004803603604081101561063157600080fd5b50803590602001356001600160a01b0316611448565b6104be6004803603604081101561065d57600080fd5b81019060208101813564010000000081111561067857600080fd5b82018360208201111561068a57600080fd5b803590602001918460208302840111640100000000831117156106ac57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156106fc57600080fd5b82018360208201111561070e57600080fd5b8035906020019184602083028401116401000000008311171561073057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506114b1945050505050565b61079a6004803603604081101561078457600080fd5b50803590602001356001600160a01b031661164c565b6040805192835260208301919091528051918290030190f35b610522611670565b61037d600480360360208110156107d157600080fd5b503561167f565b6104be600480360360408110156107ee57600080fd5b508035906020013561169d565b6104be6004803603602081101561081157600080fd5b50356118f7565b61037d611bd5565b61037d6004803603604081101561083657600080fd5b50803590602001356001600160a01b0316611bdb565b6104be6004803603602081101561086257600080fd5b5035611dcd565b6104be6004803603602081101561087f57600080fd5b50356120a4565b6104be6004803603602081101561089c57600080fd5b8101906020810181356401000000008111156108b757600080fd5b8201836020820111156108c957600080fd5b803590602001918460208302840111640100000000831117156108eb57600080fd5b5090925090506121ac565b61037d6121da565b6104be6121e6565b6104be6004803603606081101561091c57600080fd5b50803590602081013590604001351515612209565b61037d6004803603602081101561094757600080fd5b5035612328565b6104be6004803603602081101561096457600080fd5b50356001600160a01b0316612335565b6104be6004803603602081101561098a57600080fd5b50356001600160a01b031661240b565b6104be6124e9565b61037d600480360360408110156109b857600080fd5b50803590602001356001600160a01b03166125bf565b6105226125dc565b6105226125eb565b61037d600480360360408110156109f457600080fd5b50803590602001356001600160a01b03166125fa565b61052261275c565b61037d60048036036020811015610a2857600080fd5b503561276b565b61079a60048036036040811015610a4557600080fd5b50803590602001356001600160a01b0316612778565b6104be60048036036040811015610a7157600080fd5b810190602081018135640100000000811115610a8c57600080fd5b820183602082011115610a9e57600080fd5b80359060200191846020830284011164010000000083111715610ac057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610b1057600080fd5b820183602082011115610b2257600080fd5b80359060200191846020830284011164010000000083111715610b4457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506127e4945050505050565b61037d60048036036040811015610b9857600080fd5b50803590602001356001600160a01b0316612933565b61037d60048036036020811015610bc457600080fd5b50356001600160a01b0316612a93565b6104be60048036036020811015610bea57600080fd5b5035612ac7565b61052260048036036020811015610c0757600080fd5b5035612c28565b6104be60048036036020811015610c2457600080fd5b810190602081018135640100000000811115610c3f57600080fd5b820183602082011115610c5157600080fd5b80359060200191846020830284011164010000000083111715610c7357600080fd5b509092509050612c4f565b6104be60048036036020811015610c9457600080fd5b50356001600160a01b0316612d29565b61052260048036036020811015610cba57600080fd5b50356001600160a01b0316612e6a565b61037d60048036036020811015610ce057600080fd5b5035613375565b6104be60048036036040811015610cfd57600080fd5b5080359060200135613382565b610522613664565b6104be60048036036020811015610d2857600080fd5b50356001600160a01b0316613673565b61037d60048036036020811015610d4e57600080fd5b50356001600160a01b031661379f565b6105226137ec565b61037d60048036036020811015610d7c57600080fd5b50356001600160a01b03166137fb565b600080600f8481548110610d9c57fe5b90600052602060002090600502019050610db461490d565b610dbe8585613821565b60038301548354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945091926000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d6020811015610e5757600080fd5b5051600285015490915043118015610e6e57508015155b15610f60576001546012546002860154604080517ffb4c0e490000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915243604483015280516000936001600160a01b03169263fb4c0e49926064808301939192829003018186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d6040811015610f1657600080fd5b50516011546001870154919250600091610f3c9190610f369085906138aa565b9061390a565b9050610f5b610f5484610f368464e8d4a510006138aa565b8590613971565b935050505b610f8e8360400151610f8864e8d4a51000610f368688600001516138aa90919063ffffffff16565b906139cb565b9450505050505b92915050565b600f5490565b610fa9613a28565b6001600160a01b0316610fba61275c565b6001600160a01b031614611015576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008251118015611027575080518251145b6110625760405162461bcd60e51b81526004018080602001828103825260228152602001806149f96022913960400191505060405180910390fd5b60005b82518110156111495781818151811061107a57fe5b60200260200101516002600085848151811061109257fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f33e99dbd8a2fdf021abaf8531c98838a37f8e85fd3cbf0e897047074f9c4ecf48382815181106110fe57fe5b602002602001015183838151811061111257fe5b602002602001015160405180836001600160a01b0316815260200182151581526020019250505060405180910390a1600101611065565b505050565b600f818154811061115b57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b60115481565b600b546001600160a01b031681565b600154601254604080517ffb4c0e490000000000000000000000000000000000000000000000000000000081526004810192909252437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160248401526044830152805160009384936001600160a01b039091169263fb4c0e4992606480840193829003018186803b15801561124157600080fd5b505afa158015611255573d6000803e3d6000fd5b505050506040513d604081101561126b57600080fd5b506020015190508261127e5790506112bc565b6112b8601154610f36600f600187038154811061129757fe5b906000526020600020906005020160010154846138aa90919063ffffffff16565b9150505b919050565b6112c9613a28565b6001600160a01b03166112da61275c565b6001600160a01b031614611335576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b611149838383613a2c565b600460209081526000928352604080842090915290825290205481565b611365613a28565b6001600160a01b031661137661275c565b6001600160a01b0316146113d1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f3ba4758949febc607e14523620298f8b5995b1848492ad7aa083372ac886ae0790600090a250565b60026020526000908152604090205460ff1681565b600061145383613d63565b61145f57506000610f95565b60008381526004602090815260408083206001600160a01b03861684529091529020546114aa906114a461149586866001613dac565b67011c37937e080000906138aa565b90613971565b9050610f95565b6114b9613a28565b6001600160a01b03166114ca61275c565b6001600160a01b031614611525576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b80518251146115655760405162461bcd60e51b8152600401808060200182810382526022815260200180614a416022913960400191505060405180910390fd5b815161157890600890602085019061492e565b50805161158c90600990602084019061492e565b507fb98beea609c022b668575d643522cbe42a42af191702c418515c145974802fab8282604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156115f45781810151838201526020016115dc565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561163357818101518382015260200161161b565b5050505090500194505050505060405180910390a15050565b60036020908152600092835260408084209091529082529020805460019091015482565b6013546001600160a01b031681565b6008818154811061168c57fe5b600091825260209091200154905081565b6000600f83815481106116ac57fe5b906000526020600020906005020190506116c461490d565b6116ce8433613821565b90508281600001511015611729576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b61173284611dcd565b6040805160a08101825283546001600160a01b0316815260018401546020820152600284015491810191909152600383015460608201526004830154608082015261178290859033908490613ebc565b805160009061179190856139cb565b905060405180608001604052808281526020016117c464e8d4a51000610f368760030154866138aa90919063ffffffff16565b81526020016117e964e8d4a51000610f368760040154866138aa90919063ffffffff16565b8152600160209182018190526000888152601083526040808220338084529085528183208651815594860151938501939093558401516002840155606090930151600390920180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169215159290921790915561186b908790878515613feb565b9050808511156118a257600061188186836139cb565b600a5486549192506118a0916001600160a01b03908116911683614116565b505b83546118b8906001600160a01b03163383614116565b604080518281529051879133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505050505050565b600e546001600160a01b0316611954576040805162461bcd60e51b815260206004820152601460248201527f6d6967726174653a206e6f206d69677261746f72000000000000000000000000604482015290519081900360640190fd5b6000600f828154811061196357fe5b6000918252602080832060059092029091018054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519295506001600160a01b03909116939284926370a08231926024808201939291829003018186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d6020811015611a0457600080fd5b5051600e54909150611a23906001600160a01b03848116911683614196565b600e54604080517fce5494bb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529151600093929092169163ce5494bb9160248082019260209290919082900301818787803b158015611a8e57600080fd5b505af1158015611aa2573d6000803e3d6000fd5b505050506040513d6020811015611ab857600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b158015611b1d57600080fd5b505afa158015611b31573d6000803e3d6000fd5b505050506040513d6020811015611b4757600080fd5b50518214611b9c576040805162461bcd60e51b815260206004820152600c60248201527f6d6967726174653a206261640000000000000000000000000000000000000000604482015290519081900360640190fd5b83547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039190911617909255505050565b60125481565b600080600f8481548110611beb57fe5b90600052602060002090600502019050611c0361490d565b611c0d8585613821565b60038301548354604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945091926000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d6020811015611ca657600080fd5b5051600285015490915043118015611cbd57508015155b15611da5576001546012546002860154604080517ffb4c0e490000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915243604483015280516000936001600160a01b03169263fb4c0e49926064808301939192829003018186803b158015611d3b57600080fd5b505afa158015611d4f573d6000803e3d6000fd5b505050506040513d6040811015611d6557600080fd5b50602001516011546001870154919250600091611d889190610f369085906138aa565b9050611da0610f5484610f368464e8d4a510006138aa565b935050505b610f8e8360200151610f8864e8d4a51000610f368688600001516138aa90919063ffffffff16565b6000600f8281548110611ddc57fe5b9060005260206000209060050201905080600201544311611dfd57506120a1565b8054604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e6057600080fd5b505afa158015611e74573d6000803e3d6000fd5b505050506040513d6020811015611e8a57600080fd5b5051905080611ea05750436002909101556120a1565b6001546012546002840154604080517ffb4c0e4900000000000000000000000000000000000000000000000000000000815260048101939093526024830191909152436044830152805160009384936001600160a01b039091169263fb4c0e4992606480840193829003018186803b158015611f1b57600080fd5b505afa158015611f2f573d6000803e3d6000fd5b505050506040513d6040811015611f4557600080fd5b5080516020909101516011546001870154929450909250600091611f6f9190610f369085906138aa565b90506000611f90601154610f368860010154876138aa90919063ffffffff16565b9050811561206457600b54600c54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015230602482015260448101869052905191909216916323b872dd9160648083019260209291908290030181600087803b15801561201057600080fd5b505af1158015612024573d6000803e3d6000fd5b505050506040513d602081101561203a57600080fd5b5061205e905061205386610f368564e8d4a510006138aa565b600388015490613971565b60038701555b80156120915761208b61208086610f368464e8d4a510006138aa565b600488015490613971565b60048701555b4386600201819055505050505050505b50565b6000600f82815481106120b357fe5b906000526020600020906005020190506120cb61490d565b6120d58333613821565b805183549192506120f1916001600160a01b0316903390614116565b80516040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a350506040805160808101825260008082526020808301828152838501838152600160608601818152978552601084528685203386529093529490922092518355905190820155905160028201559051600390910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005b81811015611149576121d28383838181106121c657fe5b90506020020135612ac7565b6001016121af565b67011c37937e08000081565b600f5460005b81811015612205576121fd81611dcd565b6001016121ec565b5050565b612211613a28565b6001600160a01b031661222261275c565b6001600160a01b03161461227d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b801561228b5761228b6121e6565b6122c2826114a4600f868154811061229f57fe5b9060005260206000209060050201600101546011546139cb90919063ffffffff16565b60118190555081600f84815481106122d657fe5b906000526020600020906005020160010181905550827f144685f4a2c1908fdcb1c5450bfadd3b08aa5071d5df19d1a9b54c0de1d061b0836040518082815260200191505060405180910390a2505050565b6006818154811061168c57fe5b61233d613a28565b6001600160a01b031661234e61275c565b6001600160a01b0316146123a9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fe7ae49f883c825b05681b3e00e8be6fdea9ed2a8a45e4c6ecb9390fc44cce61590600090a250565b612413613a28565b6001600160a01b031661242461275c565b6001600160a01b03161461247f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6124876121e6565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f2c342266e3979163d824140326453c8bf5592ad2f774a58222ea35b5c0bfc77490600090a250565b6124f1613a28565b6001600160a01b031661250261275c565b6001600160a01b03161461255d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600560209081526000928352604080842090915290825290205481565b600a546001600160a01b031681565b600e546001600160a01b031681565b6001600160a01b03811660009081526002602052604081205460ff16806126995750600160009054906101000a90046001600160a01b03166001600160a01b0316634e3b84806040518163ffffffff1660e01b815260040160206040518083038186803b15801561266a57600080fd5b505afa15801561267e573d6000803e3d6000fd5b505050506040513d602081101561269457600080fd5b505143115b156126a657506000610f95565b6114aa6126b584846000613dac565b600880548060200260200160405190810160405280929190818152602001828054801561270157602002820191906000526020600020905b8154815260200190600101908083116126ed575b5050505050600980548060200260200160405190810160405280929190818152602001828054801561275257602002820191906000526020600020905b81548152602001906001019080831161273e575b50505050506142f0565b6000546001600160a01b031690565b6007818154811061168c57fe5b600080612783614979565b50505060009182526010602090815260408084206001600160a01b039390931684529181529181902081516080810183528154808252600183015494820185905260028301549382019390935260039091015460ff16151560609091015291565b6127ec613a28565b6001600160a01b03166127fd61275c565b6001600160a01b031614612858576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000825111801561286a575080518251145b6128a55760405162461bcd60e51b8152600401808060200182810382526028815260200180614a846028913960400191505060405180910390fd5b81516128b890600690602085019061492e565b5080516128cc90600790602084019061492e565b507f595a216dcbf780f171bb88fc4258b2683b5e1bc252a2d1741de1b7e63d16361c828260405180806020018060200183810383528581815181526020019150805190602001906020028083836000838110156115f45781810151838201526020016115dc565b6001600160a01b03811660009081526002602052604081205460ff16806129d25750600160009054906101000a90046001600160a01b03166001600160a01b0316634e3b84806040518163ffffffff1660e01b815260040160206040518083038186803b1580156129a357600080fd5b505afa1580156129b7573d6000803e3d6000fd5b505050506040513d60208110156129cd57600080fd5b505143115b156129df57506000610f95565b6114aa6129ee84846001613dac565b6006805480602002602001604051908101604052809291908181526020018280548015612a3a57602002820191906000526020600020905b815481526020019060010190808311612a26575b50505050506007805480602002602001604051908101604052809291908181526020018280548015612752576020028201919060005260206000209081548152602001906001019080831161273e5750505050506142f0565b600080805b600f54811015612ac057612ab6612aaf8286611bdb565b8390613971565b9150600101612a98565b5092915050565b6000600f8281548110612ad657fe5b90600052602060002090600502019050612aee61490d565b612af88333613821565b9050612b0383611dcd565b6040805160a08101825283546001600160a01b03168152600184015460208201526002840154918101919091526003830154606082015260048301546080820152612b5390849033908490613ebc565b604051806080016040528082600001518152602001612b8c64e8d4a51000610f36866003015486600001516138aa90919063ffffffff16565b8152602001612bb564e8d4a51000610f36866004015486600001516138aa90919063ffffffff16565b815260016020918201819052600095865260108252604080872033885283529586902083518155918301519082015593810151600285015560600151600390930180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092555050565b600d8181548110612c3557fe5b6000918252602090912001546001600160a01b0316905081565b612c57613a28565b6001600160a01b0316612c6861275c565b6001600160a01b031614612cc3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805b82811015612d23577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83018114612d1a83868685818110612d0457fe5b905060200201356001600160a01b031683613a2c565b50600101612cc7565b50505050565b612d31613a28565b6001600160a01b0316612d4261275c565b6001600160a01b031614612d9d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116612df8576040805162461bcd60e51b815260206004820152601b60248201527f73657446617465466565546f3a20696e76616c696420666565546f0000000000604482015290519081900360640190fd5b600a80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03838116919091179182905560408051929091168252517fc1edef4fd3f93cab397dfcab6c344127557f4a3cd4d69731cb0cfac9722f47fe916020908290030190a150565b600080805b600d54811015612ed857336001600160a01b0316600d8281548110612e9057fe5b6000918252602090912001546001600160a01b03161415612ed057600d8181548110612eb857fe5b6000918252602090912001546001600160a01b031691505b600101612e6f565b506001600160a01b038116612f34576040805162461bcd60e51b815260206004820152601760248201527f6d6967726174653a20696e76616c69642073656e646572000000000000000000604482015290519081900360640190fd5b6000806000806000856001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d6020811015612f9f57600080fd5b5051905060005b8181101561305f57866001600160a01b0316631526fe27600f805490506040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b158015612ff757600080fd5b505afa15801561300b573d6000803e3d6000fd5b505050506040513d608081101561302157600080fd5b50805160208201516040830151606090930151919850965090945092506001600160a01b03808716908a1614156130575761305f565b600101612fa6565b506130f033308a6001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156130b257600080fd5b505afa1580156130c6573d6000803e3d6000fd5b505050506040513d60208110156130dc57600080fd5b50516001600160a01b038c169291906143c9565b6040805160a0810182526001600160a01b038781168252602080830188815283850188815260608501888152600060808701818152600f80546001810182559281905297517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802600590930292830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691891691909117905593517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80382015591517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac804830155517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80582015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80690910155915483518881529351918c16937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91909101927f6c5d0ef1d0199b6de41ecbce95f59643be4d723ca363faf92d756e61e82fb13e92918290030190a36000805b600f548110156132c8576132be600f828154811061329d57fe5b9060005260206000209060050201600101548361397190919063ffffffff16565b9150600101613283565b506011819055601354604080517f3e68680a0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015230602483015291519190921691633e68680a9160448083019260209291908290030181600087803b15801561333c57600080fd5b505af1158015613350573d6000803e3d6000fd5b505050506040513d602081101561336657600080fd5b50519998505050505050505050565b6009818154811061168c57fe5b6000600f838154811061339157fe5b906000526020600020906005020190506133a961490d565b6133b38433613821565b90506133be84611dcd565b805115613415576040805160a08101825283546001600160a01b0316815260018401546020820152600284015491810191909152600383015460608201526004830154608082015261341590859033908490613ebc565b815461342c906001600160a01b03163330866143c9565b805160009061343b9085613971565b9050604051806080016040528082815260200161346e64e8d4a51000610f368760030154866138aa90919063ffffffff16565b815260200161349364e8d4a51000610f368760040154866138aa90919063ffffffff16565b81526001602091820181905260008881526010835260408082203383528452908190208451815592840151918301919091558201516002820155606090910151600390910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905561350d6149a3565b506000858152600360209081526040808320338452825291829020825180840184528154815260019182015481840152905483517f4e3b8480000000000000000000000000000000000000000000000000000000008152935191936001600160a01b0390911692634e3b848092600480840193829003018186803b15801561359457600080fd5b505afa1580156135a8573d6000803e3d6000fd5b505050506040513d60208110156135be57600080fd5b505143118015906135ce57508051155b1561362557604051806040016040528043815260200160008360200151116135f657436135fc565b82602001515b905260008781526003602090815260408083203384528252909120825181559101516001909101555b604080518681529051879133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505050505050565b6001546001600160a01b031681565b61367b613a28565b6001600160a01b031661368c61275c565b6001600160a01b0316146136e7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661372c5760405162461bcd60e51b81526004018080602001828103825260268152602001806149d36026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080805b600f54811015612ac05760008181526005602090815260408083206001600160a01b03881684529091529020546137e2906114a4610f548488610d8c565b91506001016137a4565b600c546001600160a01b031681565b600080805b600f54811015612ac057613817612aaf8286610d8c565b9150600101613800565b61382961490d565b613831614979565b505060009182526010602090815260408084206001600160a01b03939093168452918152918190208151608081018352815481526001820154818501908152600283015482850190815260039093015460ff16151560608084019190915284519081018552915182525193810193909352519082015290565b6000826138b957506000610f95565b828202828482816138c657fe5b04146139035760405162461bcd60e51b8152600401808060200182810382526021815260200180614a636021913960400191505060405180910390fd5b9392505050565b6000808211613960576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161396957fe5b049392505050565b600082820183811015613903576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115613a22576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3390565b60005b600f54811015613ac557826001600160a01b0316600f8281548110613a5057fe5b60009182526020909120600590910201546001600160a01b03161415613abd576040805162461bcd60e51b815260206004820152601b60248201527f6164643a204c5020746f6b656e20616c72656164792061646465640000000000604482015290519081900360640190fd5b600101613a2f565b508015613ad457613ad46121e6565b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613b2357600080fd5b505afa158015613b37573d6000803e3d6000fd5b505050506040513d6020811015613b4d57600080fd5b50511015613ba2576040805162461bcd60e51b815260206004820152601560248201527f6164643a20696e76616c6964204c5020746f6b656e0000000000000000000000604482015290519081900360640190fd5b60006012544311613bb557601254613bb7565b435b601154909150613bc79085613971565b6011556040805160a0810182526001600160a01b03858116808352602080840189815284860187815260006060870181815260808801828152600f80546001810182559381905298517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802600590940293840180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919099161790975592517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80382015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80482015590517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80582015592517f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8069093019290925591548351888152935192937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91909101927f6c5d0ef1d0199b6de41ecbce95f59643be4d723ca363faf92d756e61e82fb13e929181900390910190a350505050565b600f5460009082108015610f95575060006001600160a01b0316600f8381548110613d8a57fe5b60009182526020909120600590910201546001600160a01b0316141592915050565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316634e3b84806040518163ffffffff1660e01b815260040160206040518083038186803b158015613dfd57600080fd5b505afa158015613e11573d6000803e3d6000fd5b505050506040513d6020811015613e2757600080fd5b505190506000438210613e3a5743613e3c565b815b9050600084613e705760008781526003602090815260408083206001600160a01b038a168452909152902060010154613e94565b60008781526003602090815260408083206001600160a01b038a1684529091529020545b905060008115801590613ea75750818310155b15613eb157508082035b979650505050505050565b6000613eea8360200151610f8864e8d4a51000610f36866060015188600001516138aa90919063ffffffff16565b90506000613f1a8460400151610f8864e8d4a51000610f36876080015189600001516138aa90919063ffffffff16565b9050613f46613f3f670de0b6b3a7640000610f36613f388a8a612933565b85906138aa565b82906139cb565b60008781526005602090815260408083206001600160a01b038a168452909152902054909150613f769082613971565b60008781526005602090815260408083206001600160a01b038a168452909152902055613fa38583614451565b60408051838152905187916001600160a01b038816917f674a8930d4166ce2352c3dc1e9ff633595db479f71f3741270a0a73a52cb7b0f9181900360200190a3505050505050565b6000613ff56149a3565b5060008581526003602090815260408083206001600160a01b0388168452825291829020825180840190935280548084526001909101549183019190915283156140ac5761408361405a67011c37937e0800006140548a8a6001613dac565b906138aa565b60008981526004602090815260408083206001600160a01b038c16845290915290205490613971565b60008881526004602090815260408083206001600160a01b038b16845290915281209190915590505b60408051808201825282815243602080830191825260008b8152600382528481206001600160a01b038c16825290915292909220905181559051600190910155613eb161410f670de0b6b3a7640000610f366141088b8b6125fa565b89906138aa565b86906139cb565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261114990849061462c565b8015806142355750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561420757600080fd5b505afa15801561421b573d6000803e3d6000fd5b505050506040513d602081101561423157600080fd5b5051155b6142705760405162461bcd60e51b8152600401808060200182810382526036815260200180614ad66036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261114990849061462c565b6000826000815181106142ff57fe5b602002602001015184101561432a578160008151811061431b57fe5b60200260200101519050613903565b8260018451038151811061433a57fe5b602002602001015184111561435157506000613903565b60005b60018451038110156143c15783818151811061436c57fe5b602002602001015185118015614398575083816001018151811061438c57fe5b60200260200101518511155b156143b9578281815181106143a957fe5b6020026020010151915050613903565b600101614354565b509392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612d2390859061462c565b600b54604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156144b557600080fd5b505afa1580156144c9573d6000803e3d6000fd5b505050506040513d60208110156144df57600080fd5b505190508082111561458c57600b54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561455a57600080fd5b505af115801561456e573d6000803e3d6000fd5b505050506040513d602081101561458457600080fd5b506111499050565b600b54604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156145fb57600080fd5b505af115801561460f573d6000803e3d6000fd5b505050506040513d602081101561462557600080fd5b5050505050565b6060614681826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146dd9092919063ffffffff16565b805190915015611149578080602001905160208110156146a057600080fd5b50516111495760405162461bcd60e51b815260040180806020018281038252602a815260200180614aac602a913960400191505060405180910390fd5b60606146ec84846000856146f4565b949350505050565b6060824710156147355760405162461bcd60e51b8152600401808060200182810382526026815260200180614a1b6026913960400191505060405180910390fd5b61473e85614863565b61478f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106147ec57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016147af565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461484e576040519150601f19603f3d011682016040523d82523d6000602084013e614853565b606091505b5091509150613eb1828286614869565b3b151590565b60608315614878575081613903565b8251156148885782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156148d25781810151838201526020016148ba565b50505050905090810190601f1680156148ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180606001604052806000815260200160008152602001600081525090565b828054828255906000526020600020908101928215614969579160200282015b8281111561496957825182559160200191906001019061494e565b506149759291506149bd565b5090565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b604051806040016040528060008152602001600081525090565b5b8082111561497557600081556001016149be56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573737365744578636c756465644164647265737365733a20696e76616c69642064617461416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c7365744c505769746864726177446174613a206e6f742073616d65206c656e677468536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f777365744c6f636b656452657761726473446174613a20696e76616c696420696e70757420646174615361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212209fbf025f77bdc0dc46ab0ff790c047a93690b43aea86e97a90571b0d32e8206f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLPWithdrawFeePercent(uint256,address)": {
        "details": "calculate percent of lpWithdrawFee based on their deposit period when users withdaw during epoch, this fee will be reduced from their withdrawAmount this fee will be still stored on FateRewardControllerV3 contract this fee does not work for excluded address and after epoch is ended"
      },
      "getLockedRewardsFeePercent(uint256,address)": {
        "details": "calculate percent of lockedRewardFee based on their deposit period when withdraw during epoch, this fee will be reduced from member's lockedRewards this fee does not work for excluded address and after epoch is ended"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setExcludedAddresses(address[],bool[])": {
        "details": "set excluded addresses"
      },
      "setLPWithdrawData(uint256[],uint256[])": {
        "details": "set lpWithdrawPeriodBlocks & lpWithdrawFeePercent"
      },
      "setLockedRewardsData(uint256[],uint256[])": {
        "details": "set lockedRewardsPeriodBlocks & lockedRewardsFeePercents"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userPoints(uint256,address)": {
        "details": "calculate Points earned by this user"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14567,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "emissionSchedule",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRewardScheduleV3)14550"
      },
      {
        "astId": 14576,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "isExcludedAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14582,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "userMembershipInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(MembershipInfo)14572_storage))"
      },
      {
        "astId": 14588,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "trackedPoints",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14595,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "userLockedRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14622,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "lockedRewardsPeriodBlocks",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14648,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "lockedRewardsFeePercents",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14675,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "lpWithdrawPeriodBlocks",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14701,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "lpWithdrawFeePercent",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12336,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "fateFeeTo",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 12348,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "fate",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1045"
      },
      {
        "astId": 12351,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "vault",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 12354,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "oldControllers",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_contract(IFateRewardController)10429)dyn_storage"
      },
      {
        "astId": 12357,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "migrator",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IMigratorChef)10440"
      },
      {
        "astId": 12361,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "poolInfo",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(PoolInfoV3)14401_storage)dyn_storage"
      },
      {
        "astId": 12367,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "_userInfo",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfoV3)12345_storage))"
      },
      {
        "astId": 12371,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12374,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "startBlock",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 12376,
        "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
        "label": "mockLpTokenFactory",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IMockLpTokenFactory)10452"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IFateRewardController)10429)dyn_storage": {
        "base": "t_contract(IFateRewardController)10429",
        "encoding": "dynamic_array",
        "label": "contract IFateRewardController[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfoV3)14401_storage)dyn_storage": {
        "base": "t_struct(PoolInfoV3)14401_storage",
        "encoding": "dynamic_array",
        "label": "struct IFateRewardControllerV3.PoolInfoV3[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFateRewardController)10429": {
        "encoding": "inplace",
        "label": "contract IFateRewardController",
        "numberOfBytes": "20"
      },
      "t_contract(IMigratorChef)10440": {
        "encoding": "inplace",
        "label": "contract IMigratorChef",
        "numberOfBytes": "20"
      },
      "t_contract(IMockLpTokenFactory)10452": {
        "encoding": "inplace",
        "label": "contract IMockLpTokenFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardScheduleV3)14550": {
        "encoding": "inplace",
        "label": "contract IRewardScheduleV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(MembershipInfo)14572_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MembershipWithReward.MembershipInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MembershipInfo)14572_storage"
      },
      "t_mapping(t_address,t_struct(UserInfoV3)12345_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FateRewardControllerV3.UserInfoV3)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfoV3)12345_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(MembershipInfo)14572_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MembershipWithReward.MembershipInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(MembershipInfo)14572_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfoV3)12345_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FateRewardControllerV3.UserInfoV3))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfoV3)12345_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(MembershipInfo)14572_storage": {
        "encoding": "inplace",
        "label": "struct MembershipWithReward.MembershipInfo",
        "members": [
          {
            "astId": 14569,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "firstDepositBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14571,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "lastWithdrawBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfoV3)14401_storage": {
        "encoding": "inplace",
        "label": "struct IFateRewardControllerV3.PoolInfoV3",
        "members": [
          {
            "astId": 14392,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1045"
          },
          {
            "astId": 14394,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14396,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14398,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "accumulatedFatePerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14400,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "accumulatedLockedFatePerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfoV3)12345_storage": {
        "encoding": "inplace",
        "label": "struct FateRewardControllerV3.UserInfoV3",
        "members": [
          {
            "astId": 12338,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12340,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12342,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "lockedRewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12344,
            "contract": "contracts/fatex/v3/FateRewardControllerV3.sol:FateRewardControllerV3",
            "label": "isUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}