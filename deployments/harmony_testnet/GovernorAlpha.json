{
  "address": "0x101CC7F0C03F3E4904b68e6DDEE9Ff405bEEa1E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "timelock_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fate_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fate",
      "outputs": [
        {
          "internalType": "contract IFate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct GovernorAlpha.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestProposalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalMaxOperations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum GovernorAlpha.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "contract TimelockInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xFate",
      "outputs": [
        {
          "internalType": "contract IFate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x27cc0c574eeefdef7d5341ac4223cffb8e28c315791fe266155c4de1e583b91f",
  "receipt": {
    "to": null,
    "from": "0x5a3D3Fe2c335f7BA1809d2919C7c63E5109456D9",
    "contractAddress": "0x101CC7F0C03F3E4904b68e6DDEE9Ff405bEEa1E5",
    "transactionIndex": 0,
    "gasUsed": "2954953",
    "logsBloom": "0x
    "blockHash": "0x9ae544a7abd561bff8e4f73efceb96bc0bfba756e7765a4fe54495bf7261bf4a",
    "transactionHash": "0x27cc0c574eeefdef7d5341ac4223cffb8e28c315791fe266155c4de1e583b91f",
    "logs": [],
    "blockNumber": 13550882,
    "cumulativeGasUsed": "2954953",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE636C0997388AB64DEE938bd6cbCf588D31C531c",
    "0x6774e9Ef9344D82030e95c0E10E1536932c33c17"
  ],
  "solcInputHash": "5832f079f89dd49c94f4a578317b5e88",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fate_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fate\",\"outputs\":[{\"internalType\":\"contract IFate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct GovernorAlpha.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorAlpha.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract TimelockInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xFate\",\"outputs\":[{\"internalType\":\"contract IFate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ProposalCanceled(uint256)\":{\"notice\":\"An event emitted when a proposal has been canceled\"},\"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\":{\"notice\":\"An event emitted when a new proposal is created\"},\"ProposalExecuted(uint256)\":{\"notice\":\"An event emitted when a proposal has been executed in the Timelock\"},\"ProposalQueued(uint256,uint256)\":{\"notice\":\"An event emitted when a proposal has been queued in the Timelock\"},\"VoteCast(address,uint256,bool,uint256)\":{\"notice\":\"An event emitted when a vote has been cast on a proposal\"}},\"kind\":\"user\",\"methods\":{\"BALLOT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the ballot struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"fate()\":{\"notice\":\"The address of the FATE governance token\"},\"latestProposalIds(address)\":{\"notice\":\"The latest proposal for each proposer\"},\"name()\":{\"notice\":\"The name of this contract\"},\"proposalCount()\":{\"notice\":\"The total number of proposals\"},\"proposalMaxOperations()\":{\"notice\":\"The maximum number of actions that can be included in a proposal\"},\"proposalThreshold()\":{\"notice\":\"The number of votes required in order for a voter to become a proposer\"},\"proposals(uint256)\":{\"notice\":\"The official record of all proposals ever proposed\"},\"quorumVotes()\":{\"notice\":\"The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\"},\"timelock()\":{\"notice\":\"The address of the FATEx Protocol Timelock\"},\"votingDelay()\":{\"notice\":\"The delay before voting on a proposal may take place, once proposed\"},\"votingPeriod()\":{\"notice\":\"The duration of voting on a proposal, in blocks\"},\"xFate()\":{\"notice\":\"The address of the xFATE token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/GovernorAlpha.sol\":\"GovernorAlpha\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/governance/GovernorAlpha.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ncontract GovernorAlpha {\\n    /// @notice The name of this contract\\n    string public constant name = \\\"FATEx Governor Alpha\\\";\\n\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n    function quorumVotes() public pure returns (uint) {return 35_555_555.52e18;} // 4% of FATE\\n\\n    /// @notice The number of votes required in order for a voter to become a proposer\\n    function proposalThreshold() public pure returns (uint) {return 8_888_888e18;} // 1% of FATE\\n\\n    /// @notice The maximum number of actions that can be included in a proposal\\n    function proposalMaxOperations() public pure returns (uint) {return 10;} // 10 actions\\n\\n    /// @notice The delay before voting on a proposal may take place, once proposed\\n    function votingDelay() public pure returns (uint) {return 1;} // 1 block\\n\\n    /// @notice The duration of voting on a proposal, in blocks\\n    function votingPeriod() public pure returns (uint) {return 259_200;} // 3 days in seconds\\n\\n    /// @notice The address of the FATEx Protocol Timelock\\n    TimelockInterface public timelock;\\n\\n    /// @notice The address of the FATE governance token\\n    IFate public fate;\\n\\n    /// @notice The address of the xFATE token\\n    IFate public xFate;\\n\\n    /// @notice The total number of proposals\\n    uint public proposalCount;\\n\\n    /// @notice A proposal that is submitted by anyone that has enough ballots\\n    struct Proposal {\\n        // Unique id for looking up a proposal\\n        uint id;\\n\\n        // Creator of the proposal\\n        address proposer;\\n\\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint eta;\\n\\n        // the ordered list of target addresses for calls to be made\\n        address[] targets;\\n\\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n        uint[] values;\\n\\n        // The ordered list of function signatures to be called\\n        string[] signatures;\\n\\n        // The ordered list of calldata to be passed to each call\\n        bytes[] calldatas;\\n\\n        // The block at which voting begins: holders must delegate their votes prior to this block\\n        uint startBlock;\\n\\n        // The timestamp at which voting ends: votes must be cast prior to this timestamp\\n        uint endTimestamp;\\n\\n        // Current number of votes in favor of this proposal\\n        uint forVotes;\\n\\n        // Current number of votes in opposition to this proposal\\n        uint againstVotes;\\n\\n        // Flag marking whether the proposal has been canceled\\n        bool canceled;\\n\\n        // Flag marking whether the proposal has been executed\\n        bool executed;\\n\\n        // Receipts of ballots for the entire set of voters\\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    /// @notice Ballot receipt record for a voter\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n\\n        // Whether or not the voter supports the proposal\\n        bool support;\\n\\n        // The number of votes the voter had, which were cast\\n        uint96 votes;\\n    }\\n\\n    /// @notice Possible states that a proposal may be in\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /// @notice The official record of all proposals ever proposed\\n    mapping(uint => Proposal) public proposals;\\n\\n    /// @notice The latest proposal for each proposer\\n    mapping(address => uint) public latestProposalIds;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\n\\n    /// @notice An event emitted when a new proposal is created\\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endTimestamp, string description);\\n\\n    /// @notice An event emitted when a vote has been cast on a proposal\\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\\n\\n    /// @notice An event emitted when a proposal has been canceled\\n    event ProposalCanceled(uint id);\\n\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\n    event ProposalQueued(uint id, uint eta);\\n\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\n    event ProposalExecuted(uint id);\\n\\n    constructor(address timelock_, address fate_) public {\\n        timelock = TimelockInterface(timelock_);\\n        fate = IFate(fate_);\\n    }\\n\\n    function getPriorVotes(\\n        address account,\\n        uint blockNumber\\n    ) external view returns (uint96) {\\n        return fate.getPriorVotes(account, blockNumber) + xFate.getPriorVotes(account, blockNumber);\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public returns (uint) {\\n        require(\\n            fate.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold(),\\n            \\\"GovernorAlpha::propose: proposer votes below proposal threshold\\\"\\n        );\\n        require(\\n            targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length,\\n            \\\"GovernorAlpha::propose: proposal function information arity mismatch\\\"\\n        );\\n        require(\\n            targets.length != 0,\\n            \\\"GovernorAlpha::propose: must provide actions\\\"\\n        );\\n        require(\\n            targets.length <= proposalMaxOperations(),\\n            \\\"GovernorAlpha::propose: too many actions\\\"\\n        );\\n\\n        uint latestProposalId = latestProposalIds[msg.sender];\\n        if (latestProposalId != 0) {\\n            ProposalState proposersLatestProposalState = state(latestProposalId);\\n            require(\\n                proposersLatestProposalState != ProposalState.Active,\\n                \\\"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\\\"\\n            );\\n            require(\\n                proposersLatestProposalState != ProposalState.Pending,\\n                \\\"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\\\"\\n            );\\n        }\\n\\n        uint startBlock = add256(block.number, votingDelay());\\n        uint endTimestamp = add256(block.timestamp, votingPeriod());\\n\\n        proposalCount++;\\n        Proposal memory newProposal = Proposal({\\n        id : proposalCount,\\n        proposer : msg.sender,\\n        eta : 0,\\n        targets : targets,\\n        values : values,\\n        signatures : signatures,\\n        calldatas : calldatas,\\n        startBlock : startBlock,\\n        endTimestamp : endTimestamp,\\n        forVotes : 0,\\n        againstVotes : 0,\\n        canceled : false,\\n        executed : false\\n        });\\n\\n        proposals[newProposal.id] = newProposal;\\n        latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endTimestamp, description);\\n        return newProposal.id;\\n    }\\n\\n    function queue(uint proposalId) public {\\n        require(\\n            state(proposalId) == ProposalState.Succeeded,\\n            \\\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        uint eta = add256(block.timestamp, timelock.delay());\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\n        }\\n        proposal.eta = eta;\\n        emit ProposalQueued(proposalId, eta);\\n    }\\n\\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\\n        require(\\n            !timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))),\\n            \\\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\\\"\\n        );\\n\\n        timelock.queueTransaction(target, value, signature, data, eta);\\n    }\\n\\n    function execute(uint proposalId) public payable {\\n        require(\\n            state(proposalId) == ProposalState.Queued,\\n            \\\"GovernorAlpha::execute: proposal can only be executed if it is queued\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            timelock.executeTransaction{value : proposal.values[i]}(\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    function cancel(uint proposalId) public {\\n        ProposalState state = state(proposalId);\\n        require(\\n            state != ProposalState.Executed,\\n            \\\"GovernorAlpha::cancel: cannot cancel executed proposal\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        require(\\n            fate.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold(),\\n            \\\"GovernorAlpha::cancel: proposer above threshold\\\"\\n        );\\n\\n        proposal.canceled = true;\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit ProposalCanceled(proposalId);\\n    }\\n\\n    function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\\n        Proposal storage p = proposals[proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\\n        return proposals[proposalId].receipts[voter];\\n    }\\n\\n    function state(uint proposalId) public view returns (ProposalState) {\\n        require(\\n            proposalCount >= proposalId && proposalId > 0,\\n            \\\"GovernorAlpha::state: invalid proposal id\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        } else if (block.number <= proposal.startBlock) {\\n            return ProposalState.Pending;\\n        } else if (block.timestamp <= proposal.endTimestamp) {\\n            return ProposalState.Active;\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()) {\\n            return ProposalState.Defeated;\\n        } else if (proposal.eta == 0) {\\n            return ProposalState.Succeeded;\\n        } else if (proposal.executed) {\\n            return ProposalState.Executed;\\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\\n            return ProposalState.Expired;\\n        } else {\\n            return ProposalState.Queued;\\n        }\\n    }\\n\\n    function castVote(uint proposalId, bool support) public {\\n        return _castVote(msg.sender, proposalId, support);\\n    }\\n\\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"GovernorAlpha::castVoteBySig: invalid signature\\\"\\n        );\\n        return _castVote(signatory, proposalId, support);\\n    }\\n\\n    function _castVote(address voter, uint proposalId, bool support) internal {\\n        require(\\n            state(proposalId) == ProposalState.Active,\\n            \\\"GovernorAlpha::_castVote: voting is closed\\\"\\n        );\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[voter];\\n        require(\\n            receipt.hasVoted == false,\\n            \\\"GovernorAlpha::_castVote: voter already voted\\\"\\n        );\\n\\n        uint96 votes = fate.getPriorVotes(voter, proposal.startBlock);\\n\\n        if (support) {\\n            proposal.forVotes = add256(proposal.forVotes, votes);\\n        } else {\\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.support = support;\\n        receipt.votes = votes;\\n\\n        emit VoteCast(voter, proposalId, support, votes);\\n    }\\n\\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\\n        require(b <= a, \\\"subtraction underflow\\\");\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint chainId;\\n        assembly {chainId := chainid()}\\n        return chainId;\\n    }\\n}\\n\\ninterface TimelockInterface {\\n    function delay() external view returns (uint);\\n\\n    function GRACE_PERIOD() external view returns (uint);\\n\\n    function acceptAdmin() external;\\n\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n    function queueTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external returns (bytes32);\\n\\n    function cancelTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external;\\n\\n    function executeTransaction(address target, uint value, string calldata signature, bytes calldata data, uint eta) external payable returns (bytes memory);\\n}\\n\\ninterface IFate {\\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\\n    function delegates(address delegator) external view returns (address);\\n}\\n\",\"keccak256\":\"0x90438dc76b71eb7321d7150187b55ffc3582221f5c857f7e65f590215283b85e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200349538038062003495833981016040819052620000349162000066565b600080546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055620000bd565b6000806040838503121562000079578182fd5b82516200008681620000a4565b60208401519092506200009981620000a4565b809150509250929050565b6001600160a01b0381168114620000ba57600080fd5b50565b6133c880620000cd6000396000f3fe60806040526004361061018b5760003560e01c80634634c61f116100d6578063da35c6641161007f578063deaaa7cc11610059578063deaaa7cc14610428578063e23a9a521461043d578063fe0d94c11461046a5761018b565b8063da35c664146103d3578063da95691a146103e8578063ddf0b009146104085761018b565b8063b58131b0116100b0578063b58131b014610394578063d2a6df96146103a9578063d33219b4146103be5761018b565b80634634c61f14610332578063782d6fe1146103525780637bdbe4d01461037f5761018b565b806320606b70116101385780633932abb1116101125780633932abb1146102d05780633e4f49e6146102e557806340e58ee5146103125761018b565b806320606b701461027657806324bc1a641461028b578063328dd982146102a05761018b565b806315373e3d1161016957806315373e3d1461021257806317977c61146102345780631c703655146102545761018b565b8063013cf08b1461019057806302a251a3146101ce57806306fdde03146101f0575b600080fd5b34801561019c57600080fd5b506101b06101ab3660046125a2565b61047d565b6040516101c59998979695949392919061323f565b60405180910390f35b3480156101da57600080fd5b506101e36104e3565b6040516101c591906129ec565b3480156101fc57600080fd5b506102056104ea565b6040516101c59190612a91565b34801561021e57600080fd5b5061023261022d3660046125e6565b610523565b005b34801561024057600080fd5b506101e361024f3660046123ea565b610532565b34801561026057600080fd5b50610269610544565b6040516101c59190612a5c565b34801561028257600080fd5b506101e3610560565b34801561029757600080fd5b506101e3610584565b3480156102ac57600080fd5b506102c06102bb3660046125a2565b610593565b6040516101c59493929190612994565b3480156102dc57600080fd5b506101e361086b565b3480156102f157600080fd5b506103056103003660046125a2565b610870565b6040516101c59190612a7d565b34801561031e57600080fd5b5061023261032d3660046125a2565b610a1d565b34801561033e57600080fd5b5061023261034d366004612615565b610cbb565b34801561035e57600080fd5b5061037261036d366004612405565b610e9f565b6040516101c591906132a6565b34801561038b57600080fd5b506101e3610ffa565b3480156103a057600080fd5b506101e3610fff565b3480156103b557600080fd5b5061026961100e565b3480156103ca57600080fd5b5061026961102a565b3480156103df57600080fd5b506101e3611046565b3480156103f457600080fd5b506101e361040336600461242f565b61104c565b34801561041457600080fd5b506102326104233660046125a2565b6114bf565b34801561043457600080fd5b506101e3611798565b34801561044957600080fd5b5061045d6104583660046125ba565b6117bc565b6040516101c59190613169565b6102326104783660046125a2565b61183a565b6004602052600090815260409020805460018201546002830154600784015460088501546009860154600a870154600b90970154959673ffffffffffffffffffffffffffffffffffffffff90951695939492939192909160ff8082169161010090041689565b6203f48090565b6040518060400160405280601481526020017f464154457820476f7665726e6f7220416c70686100000000000000000000000081525081565b61052e338383611a54565b5050565b60056020526000908152604090205481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6a1d692e86e5413140e0000090565b6060806060806000600460008781526020019081526020016000209050806003018160040182600501836006018380548060200260200160405190810160405280929190818152602001828054801561062257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105f7575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561067457602002820191906000526020600020905b815481526020019060010190808311610660575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b828210156107655760008481526020908190208301805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050508152602001906001019061069c565b50505050915080805480602002602001604051908101604052809291908181526020016000905b828210156108555760008481526020908190208301805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156108415780601f1061081657610100808354040283529160200191610841565b820191906000526020600020905b81548152906001019060200180831161082457829003601f168201915b50505050508152602001906001019061078c565b5050505090509450945094509450509193509193565b600190565b600081600354101580156108845750600082115b6108a95760405162461bcd60e51b81526004016108a090612baa565b60405180910390fd5b6000828152600460205260409020600b81015460ff16156108ce576002915050610a18565b806007015443116108e3576000915050610a18565b806008015442116108f8576001915050610a18565b80600a015481600901541115806109195750610912610584565b8160090154105b15610928576003915050610a18565b600281015461093b576004915050610a18565b600b810154610100900460ff1615610957576007915050610a18565b610a02816002015460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1a287e26040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190612517565b611cab565b4210610a12576006915050610a18565b60059150505b919050565b6000610a2882610870565b90506007816007811115610a3857fe5b1415610a565760405162461bcd60e51b81526004016108a090613078565b6000828152600460205260409020610a6c610fff565b600180548382015473ffffffffffffffffffffffffffffffffffffffff9182169263782d6fe19290911690610aa2904390611cd7565b6040518363ffffffff1660e01b8152600401610abf92919061288a565b60206040518083038186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f919061266b565b6bffffffffffffffffffffffff1610610b3a5760405162461bcd60e51b81526004016108a090612dfe565b600b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560005b6003820154811015610c7e5760005460038301805473ffffffffffffffffffffffffffffffffffffffff9092169163591fcdfe919084908110610ba957fe5b60009182526020909120015460048501805473ffffffffffffffffffffffffffffffffffffffff9092169185908110610bde57fe5b9060005260206000200154856005018581548110610bf857fe5b90600052602060002001866006018681548110610c1157fe5b9060005260206000200187600201546040518663ffffffff1660e01b8152600401610c4095949392919061294d565b600060405180830381600087803b158015610c5a57600080fd5b505af1158015610c6e573d6000803e3d6000fd5b505060019092019150610b6a9050565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c83604051610cae91906129ec565b60405180910390a1505050565b60408051808201909152601481527f464154457820476f7665726e6f7220416c70686100000000000000000000000060209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f46f597e7f4c87e02bbaad6a72eabba241cc432598e68871f3b8dbb3705f904f1610d3c611cff565b30604051602001610d5094939291906129f5565b60405160208183030381529060405280519060200120905060007f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee8787604051602001610d9f93929190612a26565b60405160208183030381529060405280519060200120905060008282604051602001610dcc929190612854565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610e099493929190612a3e565b6020604051602081039080840390855afa158015610e2b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610e895760405162461bcd60e51b81526004016108a090612f98565b610e94818a8a611a54565b505050505050505050565b6002546040517f782d6fe100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063782d6fe190610ef8908690869060040161288a565b60206040518083038186803b158015610f1057600080fd5b505afa158015610f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f48919061266b565b6001546040517f782d6fe100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063782d6fe190610fa0908790879060040161288a565b60206040518083038186803b158015610fb857600080fd5b505afa158015610fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff0919061266b565b0190505b92915050565b600a90565b6a075a4b9582ecf5e5e0000090565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000611056610fff565b6001805473ffffffffffffffffffffffffffffffffffffffff169063782d6fe1903390611084904390611cd7565b6040518363ffffffff1660e01b81526004016110a192919061288a565b60206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f1919061266b565b6bffffffffffffffffffffffff161161111c5760405162461bcd60e51b81526004016108a090612f3b565b8451865114801561112e575083518651145b801561113b575082518651145b6111575760405162461bcd60e51b81526004016108a090612d7b565b85516111755760405162461bcd60e51b81526004016108a090612ede565b61117d610ffa565b8651111561119d5760405162461bcd60e51b81526004016108a090612ce7565b33600090815260056020526040902054801561121a5760006111be82610870565b905060018160078111156111ce57fe5b14156111ec5760405162461bcd60e51b81526004016108a090612ff5565b60008160078111156111fa57fe5b14156112185760405162461bcd60e51b81526004016108a090612c64565b505b6000611228436109fd61086b565b90506000611238426109fd6104e3565b600380546001019055905061124b611e95565b604051806101a0016040528060035481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600081526020018b81526020018a815260200189815260200188815260200184815260200183815260200160008152602001600081526020016000151581526020016000151581525090508060046000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003019080519060200190611355929190611f17565b5060808201518051611371916004840191602090910190611fa1565b5060a0820151805161138d916005840191602090910190611fe8565b5060c082015180516113a9916006840191602090910190612041565b5060e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b0160006101000a81548160ff02191690831515021790555061018082015181600b0160016101000a81548160ff021916908315150217905550905050806000015160056000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e08160000151338c8c8c8c89898e6040516114a99998979695949392919061319c565b60405180910390a1519998505050505050505050565b60046114ca82610870565b60078111156114d557fe5b146114f25760405162461bcd60e51b81526004016108a090612aa4565b6000818152600460208181526040808420845482517f6a42b8f8000000000000000000000000000000000000000000000000000000008152925191959461156d94429473ffffffffffffffffffffffffffffffffffffffff90931693636a42b8f8938084019390829003018186803b1580156109c557600080fd5b905060005b600383015481101561175e5761175683600301828154811061159057fe5b60009182526020909120015460048501805473ffffffffffffffffffffffffffffffffffffffff90921691849081106115c557fe5b90600052602060002001548560050184815481106115df57fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018716150201909416939093049283018590048502810185019091528181529283018282801561168b5780601f106116605761010080835404028352916020019161168b565b820191906000526020600020905b81548152906001019060200180831161166e57829003601f168201915b505050505086600601858154811061169f57fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018716150201909416939093049283018590048502810185019091528181529283018282801561174b5780601f106117205761010080835404028352916020019161174b565b820191906000526020600020905b81548152906001019060200180831161172e57829003601f168201915b505050505086611d03565b600101611572565b50600282018190556040517f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290610cae9085908490613298565b7f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee81565b6117c461209a565b50600091825260046020908152604080842073ffffffffffffffffffffffffffffffffffffffff939093168452600c9092018152918190208151606081018352905460ff80821615158352610100820416151593820193909352620100009092046bffffffffffffffffffffffff169082015290565b600561184582610870565b600781111561185057fe5b1461186d5760405162461bcd60e51b81526004016108a090612b27565b6000818152600460205260408120600b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055905b6003820154811015611a185760005460048301805473ffffffffffffffffffffffffffffffffffffffff90921691630825f38f9190849081106118ea57fe5b906000526020600020015484600301848154811061190457fe5b60009182526020909120015460048601805473ffffffffffffffffffffffffffffffffffffffff909216918690811061193957fe5b906000526020600020015486600501868154811061195357fe5b9060005260206000200187600601878154811061196c57fe5b9060005260206000200188600201546040518763ffffffff1660e01b815260040161199b95949392919061294d565b6000604051808303818588803b1580156119b457600080fd5b505af11580156119c8573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a0f919081019061252f565b506001016118ab565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f82604051611a4891906129ec565b60405180910390a15050565b6001611a5f83610870565b6007811115611a6a57fe5b14611a875760405162461bcd60e51b81526004016108a0906130d5565b600082815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452600c8101909252909120805460ff1615611add5760405162461bcd60e51b81526004016108a090612c07565b60015460078301546040517f782d6fe100000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff169163782d6fe191611b39918a9160040161288a565b60206040518083038186803b158015611b5157600080fd5b505afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b89919061266b565b90508315611bb757611bad8360090154826bffffffffffffffffffffffff16611cab565b6009840155611bd9565b611bd383600a0154826bffffffffffffffffffffffff16611cab565b600a8401555b815460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010085151502177fffffffffffffffffffffffffffffffffffff000000000000000000000000ffff16620100006bffffffffffffffffffffffff8316021782556040517f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c4690611c9b9088908890889086906128b0565b60405180910390a1505050505050565b600082820183811015611cd05760405162461bcd60e51b81526004016108a090612d44565b9392505050565b600082821115611cf95760405162461bcd60e51b81526004016108a090613132565b50900390565b4690565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091169063f2b0653790611d3e90889088908890889088906020016128f3565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611d7091906129ec565b60206040518083038186803b158015611d8857600080fd5b505afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc091906124fb565b15611ddd5760405162461bcd60e51b81526004016108a090612e5b565b6000546040517f3a66f90100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633a66f90190611e3b90889088908890889088906004016128f3565b602060405180830381600087803b158015611e5557600080fd5b505af1158015611e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8d9190612517565b505050505050565b604051806101a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b828054828255906000526020600020908101928215611f91579160200282015b82811115611f9157825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611f37565b50611f9d9291506120ba565b5090565b828054828255906000526020600020908101928215611fdc579160200282015b82811115611fdc578251825591602001919060010190611fc1565b50611f9d9291506120f1565b828054828255906000526020600020908101928215612035579160200282015b828111156120355782518051612025918491602090910190612106565b5091602001919060010190612008565b50611f9d929150612173565b82805482825590600052602060002090810192821561208e579160200282015b8281111561208e578251805161207e918491602090910190612106565b5091602001919060010190612061565b50611f9d929150612190565b604080516060810182526000808252602082018190529181019190915290565b5b80821115611f9d5780547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001016120bb565b5b80821115611f9d57600081556001016120f2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061214757805160ff1916838001178555611fdc565b82800160010185558215611fdc5791820182811115611fdc578251825591602001919060010190611fc1565b80821115611f9d57600061218782826121ad565b50600101612173565b80821115611f9d5760006121a482826121ad565b50600101612190565b50805460018160011615610100020316600290046000825580601f106121d357506121f1565b601f0160209004906000526020600020908101906121f191906120f1565b50565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ff457600080fd5b600082601f830112612228578081fd5b813561223b612236826132e6565b6132bf565b81815291506020808301908481018184028601820187101561225c57600080fd5b60005b848110156122835761227188836121f4565b8452928201929082019060010161225f565b505050505092915050565b600082601f83011261229e578081fd5b81356122ac612236826132e6565b818152915060208083019084810160005b84811015612283576122d4888484358a010161239c565b845292820192908201906001016122bd565b600082601f8301126122f6578081fd5b8135612304612236826132e6565b818152915060208083019084810160005b848110156122835761232c888484358a010161239c565b84529282019290820190600101612315565b600082601f83011261234e578081fd5b813561235c612236826132e6565b81815291506020808301908481018184028601820187101561237d57600080fd5b60005b8481101561228357813584529282019290820190600101612380565b600082601f8301126123ac578081fd5b81356123ba61223682613306565b91508082528360208285010111156123d157600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156123fb578081fd5b611cd083836121f4565b60008060408385031215612417578081fd5b61242184846121f4565b946020939093013593505050565b600080600080600060a08688031215612446578081fd5b853567ffffffffffffffff8082111561245d578283fd5b61246989838a01612218565b9650602088013591508082111561247e578283fd5b61248a89838a0161233e565b9550604088013591508082111561249f578283fd5b6124ab89838a016122e6565b945060608801359150808211156124c0578283fd5b6124cc89838a0161228e565b935060808801359150808211156124e1578283fd5b506124ee8882890161239c565b9150509295509295909350565b60006020828403121561250c578081fd5b8151611cd081613384565b600060208284031215612528578081fd5b5051919050565b600060208284031215612540578081fd5b815167ffffffffffffffff811115612556578182fd5b8201601f81018413612566578182fd5b805161257461223682613306565b818152856020838501011115612588578384fd5b612599826020830160208601613354565b95945050505050565b6000602082840312156125b3578081fd5b5035919050565b600080604083850312156125cc578182fd5b823591506125dd84602085016121f4565b90509250929050565b600080604083850312156125f8578182fd5b82359150602083013561260a81613384565b809150509250929050565b600080600080600060a0868803121561262c578283fd5b85359450602086013561263e81613384565b9350604086013560ff81168114612653578384fd5b94979396509394606081013594506080013592915050565b60006020828403121561267c578081fd5b81516bffffffffffffffffffffffff81168114611cd0578182fd5b6000815180845260208085019450808401835b838110156126dc57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016126aa565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b8581101561272d57828403895261271b848351612769565b98850198935090840190600101612703565b5091979650505050505050565b6000815180845260208085019450808401835b838110156126dc5781518752958201959082019060010161274d565b60008151808452612781816020860160208601613354565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081546001808216600081146127d1576001811461280d5761284b565b607f600284041686527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316602087015260408601935061284b565b6002830480875261281d86613348565b60005b828110156128415781546020828b0101528482019150602081019050612820565b8801602001955050505b50505092915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9490941684526020840192909252151560408301526bffffffffffffffffffffffff16606082015260800190565b600073ffffffffffffffffffffffffffffffffffffffff8716825285602083015260a0604083015261292860a0830186612769565b828103606084015261293a8186612769565b9150508260808301529695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8716825285602083015260a0604083015261298260a08301866127b3565b828103606084015261293a81866127b3565b6000608082526129a76080830187612697565b82810360208401526129b9818761273a565b905082810360408401526129cd81866126e7565b905082810360608401526129e181856126e7565b979650505050505050565b90815260200190565b9384526020840192909252604083015273ffffffffffffffffffffffffffffffffffffffff16606082015260800190565b92835260208301919091521515604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020810160088310612a8b57fe5b91905290565b600060208252611cd06020830184612769565b60208082526044908201527f476f7665726e6f72416c7068613a3a71756575653a2070726f706f73616c206360408201527f616e206f6e6c792062652071756575656420696620697420697320737563636560608201527f6564656400000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526045908201527f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60408201527f2063616e206f6e6c79206265206578656375746564206966206974206973207160608201527f7565756564000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526029908201527f476f7665726e6f72416c7068613a3a73746174653a20696e76616c696420707260408201527f6f706f73616c2069640000000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465722060408201527f616c726561647920766f74656400000000000000000000000000000000000000606082015260800190565b60208082526059908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000608082015260a00190565b60208082526028908201527f476f7665726e6f72416c7068613a3a70726f706f73653a20746f6f206d616e7960408201527f20616374696f6e73000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f6164646974696f6e206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526044908201527f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73616c60408201527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d60608201527f6174636800000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602f908201527f476f7665726e6f72416c7068613a3a63616e63656c3a2070726f706f7365722060408201527f61626f7665207468726573686f6c640000000000000000000000000000000000606082015260800190565b60208082526044908201527f476f7665726e6f72416c7068613a3a5f71756575654f725265766572743a207060408201527f726f706f73616c20616374696f6e20616c72656164792071756575656420617460608201527f2065746100000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602c908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206d7573742070726f60408201527f7669646520616374696f6e730000000000000000000000000000000000000000606082015260800190565b6020808252603f908201527f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73657260408201527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c6400606082015260800190565b6020808252602f908201527f476f7665726e6f72416c7068613a3a63617374566f746542795369673a20696e60408201527f76616c6964207369676e61747572650000000000000000000000000000000000606082015260800190565b60208082526058908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c7265616479206163746976652070726f706f73616c0000000000000000608082015260a00190565b60208082526036908201527f476f7665726e6f72416c7068613a3a63616e63656c3a2063616e6e6f7420636160408201527f6e63656c2065786563757465642070726f706f73616c00000000000000000000606082015260800190565b6020808252602a908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f74696e6760408201527f20697320636c6f73656400000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f7375627472616374696f6e20756e646572666c6f770000000000000000000000604082015260600190565b8151151581526020808301511515908201526040918201516bffffffffffffffffffffffff169181019190915260600190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b1660208401528060408401526131d28184018b612697565b905082810360608401526131e6818a61273a565b905082810360808401526131fa81896126e7565b905082810360a084015261320e81886126e7565b90508560c08401528460e084015282810361010084015261322f8185612769565b9c9b505050505050505050505050565b98895273ffffffffffffffffffffffffffffffffffffffff97909716602089015260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b918252602082015260400190565b6bffffffffffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff811182821017156132de57600080fd5b604052919050565b600067ffffffffffffffff8211156132fc578081fd5b5060209081020190565b600067ffffffffffffffff82111561331c578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60009081526020902090565b60005b8381101561336f578181015183820152602001613357565b8381111561337e576000848401525b50505050565b80151581146121f157600080fdfea26469706673582212205d6e9440f667d0dff8e0c3e74f9075734af3ab0e3f73210030d8efd46953fdc464736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c80634634c61f116100d6578063da35c6641161007f578063deaaa7cc11610059578063deaaa7cc14610428578063e23a9a521461043d578063fe0d94c11461046a5761018b565b8063da35c664146103d3578063da95691a146103e8578063ddf0b009146104085761018b565b8063b58131b0116100b0578063b58131b014610394578063d2a6df96146103a9578063d33219b4146103be5761018b565b80634634c61f14610332578063782d6fe1146103525780637bdbe4d01461037f5761018b565b806320606b70116101385780633932abb1116101125780633932abb1146102d05780633e4f49e6146102e557806340e58ee5146103125761018b565b806320606b701461027657806324bc1a641461028b578063328dd982146102a05761018b565b806315373e3d1161016957806315373e3d1461021257806317977c61146102345780631c703655146102545761018b565b8063013cf08b1461019057806302a251a3146101ce57806306fdde03146101f0575b600080fd5b34801561019c57600080fd5b506101b06101ab3660046125a2565b61047d565b6040516101c59998979695949392919061323f565b60405180910390f35b3480156101da57600080fd5b506101e36104e3565b6040516101c591906129ec565b3480156101fc57600080fd5b506102056104ea565b6040516101c59190612a91565b34801561021e57600080fd5b5061023261022d3660046125e6565b610523565b005b34801561024057600080fd5b506101e361024f3660046123ea565b610532565b34801561026057600080fd5b50610269610544565b6040516101c59190612a5c565b34801561028257600080fd5b506101e3610560565b34801561029757600080fd5b506101e3610584565b3480156102ac57600080fd5b506102c06102bb3660046125a2565b610593565b6040516101c59493929190612994565b3480156102dc57600080fd5b506101e361086b565b3480156102f157600080fd5b506103056103003660046125a2565b610870565b6040516101c59190612a7d565b34801561031e57600080fd5b5061023261032d3660046125a2565b610a1d565b34801561033e57600080fd5b5061023261034d366004612615565b610cbb565b34801561035e57600080fd5b5061037261036d366004612405565b610e9f565b6040516101c591906132a6565b34801561038b57600080fd5b506101e3610ffa565b3480156103a057600080fd5b506101e3610fff565b3480156103b557600080fd5b5061026961100e565b3480156103ca57600080fd5b5061026961102a565b3480156103df57600080fd5b506101e3611046565b3480156103f457600080fd5b506101e361040336600461242f565b61104c565b34801561041457600080fd5b506102326104233660046125a2565b6114bf565b34801561043457600080fd5b506101e3611798565b34801561044957600080fd5b5061045d6104583660046125ba565b6117bc565b6040516101c59190613169565b6102326104783660046125a2565b61183a565b6004602052600090815260409020805460018201546002830154600784015460088501546009860154600a870154600b90970154959673ffffffffffffffffffffffffffffffffffffffff90951695939492939192909160ff8082169161010090041689565b6203f48090565b6040518060400160405280601481526020017f464154457820476f7665726e6f7220416c70686100000000000000000000000081525081565b61052e338383611a54565b5050565b60056020526000908152604090205481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6a1d692e86e5413140e0000090565b6060806060806000600460008781526020019081526020016000209050806003018160040182600501836006018380548060200260200160405190810160405280929190818152602001828054801561062257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105f7575b505050505093508280548060200260200160405190810160405280929190818152602001828054801561067457602002820191906000526020600020905b815481526020019060010190808311610660575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b828210156107655760008481526020908190208301805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b50505050508152602001906001019061069c565b50505050915080805480602002602001604051908101604052809291908181526020016000905b828210156108555760008481526020908190208301805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156108415780601f1061081657610100808354040283529160200191610841565b820191906000526020600020905b81548152906001019060200180831161082457829003601f168201915b50505050508152602001906001019061078c565b5050505090509450945094509450509193509193565b600190565b600081600354101580156108845750600082115b6108a95760405162461bcd60e51b81526004016108a090612baa565b60405180910390fd5b6000828152600460205260409020600b81015460ff16156108ce576002915050610a18565b806007015443116108e3576000915050610a18565b806008015442116108f8576001915050610a18565b80600a015481600901541115806109195750610912610584565b8160090154105b15610928576003915050610a18565b600281015461093b576004915050610a18565b600b810154610100900460ff1615610957576007915050610a18565b610a02816002015460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1a287e26040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190612517565b611cab565b4210610a12576006915050610a18565b60059150505b919050565b6000610a2882610870565b90506007816007811115610a3857fe5b1415610a565760405162461bcd60e51b81526004016108a090613078565b6000828152600460205260409020610a6c610fff565b600180548382015473ffffffffffffffffffffffffffffffffffffffff9182169263782d6fe19290911690610aa2904390611cd7565b6040518363ffffffff1660e01b8152600401610abf92919061288a565b60206040518083038186803b158015610ad757600080fd5b505afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f919061266b565b6bffffffffffffffffffffffff1610610b3a5760405162461bcd60e51b81526004016108a090612dfe565b600b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560005b6003820154811015610c7e5760005460038301805473ffffffffffffffffffffffffffffffffffffffff9092169163591fcdfe919084908110610ba957fe5b60009182526020909120015460048501805473ffffffffffffffffffffffffffffffffffffffff9092169185908110610bde57fe5b9060005260206000200154856005018581548110610bf857fe5b90600052602060002001866006018681548110610c1157fe5b9060005260206000200187600201546040518663ffffffff1660e01b8152600401610c4095949392919061294d565b600060405180830381600087803b158015610c5a57600080fd5b505af1158015610c6e573d6000803e3d6000fd5b505060019092019150610b6a9050565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c83604051610cae91906129ec565b60405180910390a1505050565b60408051808201909152601481527f464154457820476f7665726e6f7220416c70686100000000000000000000000060209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f46f597e7f4c87e02bbaad6a72eabba241cc432598e68871f3b8dbb3705f904f1610d3c611cff565b30604051602001610d5094939291906129f5565b60405160208183030381529060405280519060200120905060007f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee8787604051602001610d9f93929190612a26565b60405160208183030381529060405280519060200120905060008282604051602001610dcc929190612854565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610e099493929190612a3e565b6020604051602081039080840390855afa158015610e2b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610e895760405162461bcd60e51b81526004016108a090612f98565b610e94818a8a611a54565b505050505050505050565b6002546040517f782d6fe100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063782d6fe190610ef8908690869060040161288a565b60206040518083038186803b158015610f1057600080fd5b505afa158015610f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f48919061266b565b6001546040517f782d6fe100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063782d6fe190610fa0908790879060040161288a565b60206040518083038186803b158015610fb857600080fd5b505afa158015610fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff0919061266b565b0190505b92915050565b600a90565b6a075a4b9582ecf5e5e0000090565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6000611056610fff565b6001805473ffffffffffffffffffffffffffffffffffffffff169063782d6fe1903390611084904390611cd7565b6040518363ffffffff1660e01b81526004016110a192919061288a565b60206040518083038186803b1580156110b957600080fd5b505afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f1919061266b565b6bffffffffffffffffffffffff161161111c5760405162461bcd60e51b81526004016108a090612f3b565b8451865114801561112e575083518651145b801561113b575082518651145b6111575760405162461bcd60e51b81526004016108a090612d7b565b85516111755760405162461bcd60e51b81526004016108a090612ede565b61117d610ffa565b8651111561119d5760405162461bcd60e51b81526004016108a090612ce7565b33600090815260056020526040902054801561121a5760006111be82610870565b905060018160078111156111ce57fe5b14156111ec5760405162461bcd60e51b81526004016108a090612ff5565b60008160078111156111fa57fe5b14156112185760405162461bcd60e51b81526004016108a090612c64565b505b6000611228436109fd61086b565b90506000611238426109fd6104e3565b600380546001019055905061124b611e95565b604051806101a0016040528060035481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600081526020018b81526020018a815260200189815260200188815260200184815260200183815260200160008152602001600081526020016000151581526020016000151581525090508060046000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003019080519060200190611355929190611f17565b5060808201518051611371916004840191602090910190611fa1565b5060a0820151805161138d916005840191602090910190611fe8565b5060c082015180516113a9916006840191602090910190612041565b5060e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b0160006101000a81548160ff02191690831515021790555061018082015181600b0160016101000a81548160ff021916908315150217905550905050806000015160056000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e08160000151338c8c8c8c89898e6040516114a99998979695949392919061319c565b60405180910390a1519998505050505050505050565b60046114ca82610870565b60078111156114d557fe5b146114f25760405162461bcd60e51b81526004016108a090612aa4565b6000818152600460208181526040808420845482517f6a42b8f8000000000000000000000000000000000000000000000000000000008152925191959461156d94429473ffffffffffffffffffffffffffffffffffffffff90931693636a42b8f8938084019390829003018186803b1580156109c557600080fd5b905060005b600383015481101561175e5761175683600301828154811061159057fe5b60009182526020909120015460048501805473ffffffffffffffffffffffffffffffffffffffff90921691849081106115c557fe5b90600052602060002001548560050184815481106115df57fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018716150201909416939093049283018590048502810185019091528181529283018282801561168b5780601f106116605761010080835404028352916020019161168b565b820191906000526020600020905b81548152906001019060200180831161166e57829003601f168201915b505050505086600601858154811061169f57fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018716150201909416939093049283018590048502810185019091528181529283018282801561174b5780601f106117205761010080835404028352916020019161174b565b820191906000526020600020905b81548152906001019060200180831161172e57829003601f168201915b505050505086611d03565b600101611572565b50600282018190556040517f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290610cae9085908490613298565b7f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee81565b6117c461209a565b50600091825260046020908152604080842073ffffffffffffffffffffffffffffffffffffffff939093168452600c9092018152918190208151606081018352905460ff80821615158352610100820416151593820193909352620100009092046bffffffffffffffffffffffff169082015290565b600561184582610870565b600781111561185057fe5b1461186d5760405162461bcd60e51b81526004016108a090612b27565b6000818152600460205260408120600b810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055905b6003820154811015611a185760005460048301805473ffffffffffffffffffffffffffffffffffffffff90921691630825f38f9190849081106118ea57fe5b906000526020600020015484600301848154811061190457fe5b60009182526020909120015460048601805473ffffffffffffffffffffffffffffffffffffffff909216918690811061193957fe5b906000526020600020015486600501868154811061195357fe5b9060005260206000200187600601878154811061196c57fe5b9060005260206000200188600201546040518763ffffffff1660e01b815260040161199b95949392919061294d565b6000604051808303818588803b1580156119b457600080fd5b505af11580156119c8573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a0f919081019061252f565b506001016118ab565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f82604051611a4891906129ec565b60405180910390a15050565b6001611a5f83610870565b6007811115611a6a57fe5b14611a875760405162461bcd60e51b81526004016108a0906130d5565b600082815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452600c8101909252909120805460ff1615611add5760405162461bcd60e51b81526004016108a090612c07565b60015460078301546040517f782d6fe100000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff169163782d6fe191611b39918a9160040161288a565b60206040518083038186803b158015611b5157600080fd5b505afa158015611b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b89919061266b565b90508315611bb757611bad8360090154826bffffffffffffffffffffffff16611cab565b6009840155611bd9565b611bd383600a0154826bffffffffffffffffffffffff16611cab565b600a8401555b815460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010085151502177fffffffffffffffffffffffffffffffffffff000000000000000000000000ffff16620100006bffffffffffffffffffffffff8316021782556040517f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c4690611c9b9088908890889086906128b0565b60405180910390a1505050505050565b600082820183811015611cd05760405162461bcd60e51b81526004016108a090612d44565b9392505050565b600082821115611cf95760405162461bcd60e51b81526004016108a090613132565b50900390565b4690565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091169063f2b0653790611d3e90889088908890889088906020016128f3565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611d7091906129ec565b60206040518083038186803b158015611d8857600080fd5b505afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc091906124fb565b15611ddd5760405162461bcd60e51b81526004016108a090612e5b565b6000546040517f3a66f90100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633a66f90190611e3b90889088908890889088906004016128f3565b602060405180830381600087803b158015611e5557600080fd5b505af1158015611e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8d9190612517565b505050505050565b604051806101a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b828054828255906000526020600020908101928215611f91579160200282015b82811115611f9157825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611f37565b50611f9d9291506120ba565b5090565b828054828255906000526020600020908101928215611fdc579160200282015b82811115611fdc578251825591602001919060010190611fc1565b50611f9d9291506120f1565b828054828255906000526020600020908101928215612035579160200282015b828111156120355782518051612025918491602090910190612106565b5091602001919060010190612008565b50611f9d929150612173565b82805482825590600052602060002090810192821561208e579160200282015b8281111561208e578251805161207e918491602090910190612106565b5091602001919060010190612061565b50611f9d929150612190565b604080516060810182526000808252602082018190529181019190915290565b5b80821115611f9d5780547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001016120bb565b5b80821115611f9d57600081556001016120f2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061214757805160ff1916838001178555611fdc565b82800160010185558215611fdc5791820182811115611fdc578251825591602001919060010190611fc1565b80821115611f9d57600061218782826121ad565b50600101612173565b80821115611f9d5760006121a482826121ad565b50600101612190565b50805460018160011615610100020316600290046000825580601f106121d357506121f1565b601f0160209004906000526020600020908101906121f191906120f1565b50565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ff457600080fd5b600082601f830112612228578081fd5b813561223b612236826132e6565b6132bf565b81815291506020808301908481018184028601820187101561225c57600080fd5b60005b848110156122835761227188836121f4565b8452928201929082019060010161225f565b505050505092915050565b600082601f83011261229e578081fd5b81356122ac612236826132e6565b818152915060208083019084810160005b84811015612283576122d4888484358a010161239c565b845292820192908201906001016122bd565b600082601f8301126122f6578081fd5b8135612304612236826132e6565b818152915060208083019084810160005b848110156122835761232c888484358a010161239c565b84529282019290820190600101612315565b600082601f83011261234e578081fd5b813561235c612236826132e6565b81815291506020808301908481018184028601820187101561237d57600080fd5b60005b8481101561228357813584529282019290820190600101612380565b600082601f8301126123ac578081fd5b81356123ba61223682613306565b91508082528360208285010111156123d157600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156123fb578081fd5b611cd083836121f4565b60008060408385031215612417578081fd5b61242184846121f4565b946020939093013593505050565b600080600080600060a08688031215612446578081fd5b853567ffffffffffffffff8082111561245d578283fd5b61246989838a01612218565b9650602088013591508082111561247e578283fd5b61248a89838a0161233e565b9550604088013591508082111561249f578283fd5b6124ab89838a016122e6565b945060608801359150808211156124c0578283fd5b6124cc89838a0161228e565b935060808801359150808211156124e1578283fd5b506124ee8882890161239c565b9150509295509295909350565b60006020828403121561250c578081fd5b8151611cd081613384565b600060208284031215612528578081fd5b5051919050565b600060208284031215612540578081fd5b815167ffffffffffffffff811115612556578182fd5b8201601f81018413612566578182fd5b805161257461223682613306565b818152856020838501011115612588578384fd5b612599826020830160208601613354565b95945050505050565b6000602082840312156125b3578081fd5b5035919050565b600080604083850312156125cc578182fd5b823591506125dd84602085016121f4565b90509250929050565b600080604083850312156125f8578182fd5b82359150602083013561260a81613384565b809150509250929050565b600080600080600060a0868803121561262c578283fd5b85359450602086013561263e81613384565b9350604086013560ff81168114612653578384fd5b94979396509394606081013594506080013592915050565b60006020828403121561267c578081fd5b81516bffffffffffffffffffffffff81168114611cd0578182fd5b6000815180845260208085019450808401835b838110156126dc57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016126aa565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b8581101561272d57828403895261271b848351612769565b98850198935090840190600101612703565b5091979650505050505050565b6000815180845260208085019450808401835b838110156126dc5781518752958201959082019060010161274d565b60008151808452612781816020860160208601613354565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081546001808216600081146127d1576001811461280d5761284b565b607f600284041686527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316602087015260408601935061284b565b6002830480875261281d86613348565b60005b828110156128415781546020828b0101528482019150602081019050612820565b8801602001955050505b50505092915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9490941684526020840192909252151560408301526bffffffffffffffffffffffff16606082015260800190565b600073ffffffffffffffffffffffffffffffffffffffff8716825285602083015260a0604083015261292860a0830186612769565b828103606084015261293a8186612769565b9150508260808301529695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8716825285602083015260a0604083015261298260a08301866127b3565b828103606084015261293a81866127b3565b6000608082526129a76080830187612697565b82810360208401526129b9818761273a565b905082810360408401526129cd81866126e7565b905082810360608401526129e181856126e7565b979650505050505050565b90815260200190565b9384526020840192909252604083015273ffffffffffffffffffffffffffffffffffffffff16606082015260800190565b92835260208301919091521515604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020810160088310612a8b57fe5b91905290565b600060208252611cd06020830184612769565b60208082526044908201527f476f7665726e6f72416c7068613a3a71756575653a2070726f706f73616c206360408201527f616e206f6e6c792062652071756575656420696620697420697320737563636560608201527f6564656400000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526045908201527f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60408201527f2063616e206f6e6c79206265206578656375746564206966206974206973207160608201527f7565756564000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526029908201527f476f7665726e6f72416c7068613a3a73746174653a20696e76616c696420707260408201527f6f706f73616c2069640000000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465722060408201527f616c726561647920766f74656400000000000000000000000000000000000000606082015260800190565b60208082526059908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000608082015260a00190565b60208082526028908201527f476f7665726e6f72416c7068613a3a70726f706f73653a20746f6f206d616e7960408201527f20616374696f6e73000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f6164646974696f6e206f766572666c6f77000000000000000000000000000000604082015260600190565b60208082526044908201527f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73616c60408201527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d60608201527f6174636800000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602f908201527f476f7665726e6f72416c7068613a3a63616e63656c3a2070726f706f7365722060408201527f61626f7665207468726573686f6c640000000000000000000000000000000000606082015260800190565b60208082526044908201527f476f7665726e6f72416c7068613a3a5f71756575654f725265766572743a207060408201527f726f706f73616c20616374696f6e20616c72656164792071756575656420617460608201527f2065746100000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252602c908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206d7573742070726f60408201527f7669646520616374696f6e730000000000000000000000000000000000000000606082015260800190565b6020808252603f908201527f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73657260408201527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c6400606082015260800190565b6020808252602f908201527f476f7665726e6f72416c7068613a3a63617374566f746542795369673a20696e60408201527f76616c6964207369676e61747572650000000000000000000000000000000000606082015260800190565b60208082526058908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c7265616479206163746976652070726f706f73616c0000000000000000608082015260a00190565b60208082526036908201527f476f7665726e6f72416c7068613a3a63616e63656c3a2063616e6e6f7420636160408201527f6e63656c2065786563757465642070726f706f73616c00000000000000000000606082015260800190565b6020808252602a908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f74696e6760408201527f20697320636c6f73656400000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f7375627472616374696f6e20756e646572666c6f770000000000000000000000604082015260600190565b8151151581526020808301511515908201526040918201516bffffffffffffffffffffffff169181019190915260600190565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b1660208401528060408401526131d28184018b612697565b905082810360608401526131e6818a61273a565b905082810360808401526131fa81896126e7565b905082810360a084015261320e81886126e7565b90508560c08401528460e084015282810361010084015261322f8185612769565b9c9b505050505050505050505050565b98895273ffffffffffffffffffffffffffffffffffffffff97909716602089015260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b918252602082015260400190565b6bffffffffffffffffffffffff91909116815260200190565b60405181810167ffffffffffffffff811182821017156132de57600080fd5b604052919050565b600067ffffffffffffffff8211156132fc578081fd5b5060209081020190565b600067ffffffffffffffff82111561331c578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60009081526020902090565b60005b8381101561336f578181015183820152602001613357565b8381111561337e576000848401525b50505050565b80151581146121f157600080fdfea26469706673582212205d6e9440f667d0dff8e0c3e74f9075734af3ab0e3f73210030d8efd46953fdc464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "ProposalCanceled(uint256)": {
        "notice": "An event emitted when a proposal has been canceled"
      },
      "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {
        "notice": "An event emitted when a new proposal is created"
      },
      "ProposalExecuted(uint256)": {
        "notice": "An event emitted when a proposal has been executed in the Timelock"
      },
      "ProposalQueued(uint256,uint256)": {
        "notice": "An event emitted when a proposal has been queued in the Timelock"
      },
      "VoteCast(address,uint256,bool,uint256)": {
        "notice": "An event emitted when a vote has been cast on a proposal"
      }
    },
    "kind": "user",
    "methods": {
      "BALLOT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the ballot struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "fate()": {
        "notice": "The address of the FATE governance token"
      },
      "latestProposalIds(address)": {
        "notice": "The latest proposal for each proposer"
      },
      "name()": {
        "notice": "The name of this contract"
      },
      "proposalCount()": {
        "notice": "The total number of proposals"
      },
      "proposalMaxOperations()": {
        "notice": "The maximum number of actions that can be included in a proposal"
      },
      "proposalThreshold()": {
        "notice": "The number of votes required in order for a voter to become a proposer"
      },
      "proposals(uint256)": {
        "notice": "The official record of all proposals ever proposed"
      },
      "quorumVotes()": {
        "notice": "The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed"
      },
      "timelock()": {
        "notice": "The address of the FATEx Protocol Timelock"
      },
      "votingDelay()": {
        "notice": "The delay before voting on a proposal may take place, once proposed"
      },
      "votingPeriod()": {
        "notice": "The duration of voting on a proposal, in blocks"
      },
      "xFate()": {
        "notice": "The address of the xFATE token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "timelock",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TimelockInterface)1168"
      },
      {
        "astId": 57,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "fate",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFate)1185"
      },
      {
        "astId": 60,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "xFate",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFate)1185"
      },
      {
        "astId": 63,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "proposalCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 119,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Proposal)98_storage)"
      },
      {
        "astId": 124,
        "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
        "label": "latestProposalIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IFate)1185": {
        "encoding": "inplace",
        "label": "contract IFate",
        "numberOfBytes": "20"
      },
      "t_contract(TimelockInterface)1168": {
        "encoding": "inplace",
        "label": "contract TimelockInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Receipt)105_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GovernorAlpha.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)105_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)98_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorAlpha.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)98_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)98_storage": {
        "encoding": "inplace",
        "label": "struct GovernorAlpha.Proposal",
        "members": [
          {
            "astId": 65,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 67,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 69,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "eta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 72,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "targets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 75,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "values",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 78,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "signatures",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 81,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "calldatas",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 83,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "startBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 85,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 87,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "forVotes",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 89,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "againstVotes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 91,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "canceled",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 93,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "executed",
            "offset": 1,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 97,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "receipts",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(Receipt)105_storage)"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Receipt)105_storage": {
        "encoding": "inplace",
        "label": "struct GovernorAlpha.Receipt",
        "members": [
          {
            "astId": 100,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 102,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "support",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 104,
            "contract": "contracts/governance/GovernorAlpha.sol:GovernorAlpha",
            "label": "votes",
            "offset": 2,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}